import{_ as s,o as n,c as a,R as l}from"./chunks/framework.7FlijoJG.js";const u=JSON.parse('{"title":"短信验证码功能","description":"","frontmatter":{"title":"短信验证码功能","date":"2024-01-16T14:34:10.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"系统设计/短信验证码功能.md","filePath":"系统设计/短信验证码功能.md","lastUpdated":1711296414000}'),p={name:"系统设计/短信验证码功能.md"},o=l(`<p>我们将会使用 Redis 的特性来解决这个问题，Redis 的 feature 有设定键值对的过期时间，以及原子性的操作指令 INCR。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> redis.clients.jedis.Jedis;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SmsVerification</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Jedis redisClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Jedis</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendSms</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">phone</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String timesKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> phone </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:times&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String blockedKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> phone </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:blocked&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果用户在阻塞列表内, 则不允许发送短信</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (redisClient.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(blockedKey)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;超过次数限制，无法发送&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取次数</span></span>
<span class="line"><span style="color:#E1E4E8;">        String times </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> redisClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(timesKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (times </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 第一次发送, 设置过期时间为60秒，同时发送次数为1</span></span>
<span class="line"><span style="color:#E1E4E8;">            redisClient.</span><span style="color:#B392F0;">setex</span><span style="color:#E1E4E8;">(timesKey, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(times) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 发送次数小于5次，发送次数+1</span></span>
<span class="line"><span style="color:#E1E4E8;">            redisClient.</span><span style="color:#B392F0;">incr</span><span style="color:#E1E4E8;">(timesKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 发送次数超过5次，添加到阻塞列表并设置过期时间为60秒，阻止用户再次发送短信</span></span>
<span class="line"><span style="color:#E1E4E8;">            redisClient.</span><span style="color:#B392F0;">setex</span><span style="color:#E1E4E8;">(blockedKey, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;超过次数限制，无法发送&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发送短信</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;短信发送成功，验证码是：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> code);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SmsVerification smsVerification </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SmsVerification</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        smsVerification.</span><span style="color:#B392F0;">sendSms</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1111&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 输出短信发送成功，验证码是：1111</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> redis.clients.jedis.Jedis;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SmsVerification</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Jedis redisClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Jedis</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendSms</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">phone</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String timesKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> phone </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:times&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String blockedKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> phone </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:blocked&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果用户在阻塞列表内, 则不允许发送短信</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (redisClient.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(blockedKey)) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;超过次数限制，无法发送&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取次数</span></span>
<span class="line"><span style="color:#24292E;">        String times </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(timesKey);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (times </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 第一次发送, 设置过期时间为60秒，同时发送次数为1</span></span>
<span class="line"><span style="color:#24292E;">            redisClient.</span><span style="color:#6F42C1;">setex</span><span style="color:#24292E;">(timesKey, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(times) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送次数小于5次，发送次数+1</span></span>
<span class="line"><span style="color:#24292E;">            redisClient.</span><span style="color:#6F42C1;">incr</span><span style="color:#24292E;">(timesKey);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送次数超过5次，添加到阻塞列表并设置过期时间为60秒，阻止用户再次发送短信</span></span>
<span class="line"><span style="color:#24292E;">            redisClient.</span><span style="color:#6F42C1;">setex</span><span style="color:#24292E;">(blockedKey, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;超过次数限制，无法发送&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发送短信</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;短信发送成功，验证码是：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> code);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SmsVerification smsVerification </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SmsVerification</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        smsVerification.</span><span style="color:#6F42C1;">sendSms</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1111&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 输出短信发送成功，验证码是：1111</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个代码中，我们使用 Jedis 作为 Redis Java 的客户端，你可以根据自己的需要替换为其它的库。代码逻辑主要考虑两种情况：首次发送和非首次发送。对于首次发送，我们在 Redis 中创建一条记录，键是手机加上次数，设置过期时间为 60 秒；对于非首次发送，如果已经发送的次数小于 5，那么就递增发送次数，否则将该手机号加入到一个被阻塞的列表，该手机在接下来的 60 秒内将无法发送短信。</p><p>以上代码只是一个实现的基础思路，实际应用中还需要考虑一些问题，比如高并发情况下的性能问题，以及网络异常等问题的处理。</p><h2 id="存在问题" tabindex="-1">存在问题 <a class="header-anchor" href="#存在问题" aria-label="Permalink to &quot;存在问题&quot;">​</a></h2><p>在我们的例子中, 当大量并发请求挤压短信服务并且用户发送短信的请求频率接近或者大于 Redis 键值对的过期设置，那么可能会出现下面几个问题：</p><ol><li><strong>超过限制的消息发送</strong>: 假设三个短信发送请求几乎同时到达，前两个请求在第三个请求之前已经确定 Key 不存在或 Key 的值小于 5，然后三个请求分别按顺序执行生成新 Key 或递增 Key 的值并发送短信。结果就是在很短的时间内容发送了三个短信超过设定的上限。</li><li><strong>Redis 阻塞</strong>: 在大量并发的情况下，所有的请求可能会在一瞬间对 Redis 数据库产生巨大的压力，导致 Redis 阻塞或者拖慢其他服务。</li><li><strong>延迟发送</strong>: 当我们有大量的短信发送请求排队等待处理时，之前的请求可能会决定一个请求是否能够发送短信，但当这个请求真正被处理时，前面的请求可能已经完成并改变了数据的状态。</li></ol><p>以上问题的解决方案通常需要在你的系统架构和硬件配置中进行优化。比如可以通过限制某一时间段内对一个服务的请求数量，或者使用一种方式来序列化对特定 Key 的访问请求来减轻并发带来的问题。在实际的系统设计中并发问题的解决方案需要根据具体的系统要求和工作负载来确定，可能需要对系统的整体性能和并发需求进行深入的了解。</p>`,8),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const C=s(p,[["render",t]]);export{u as __pageData,C as default};
