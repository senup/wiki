import{_ as t,o as e,c as a,R as s}from"./chunks/framework.7FlijoJG.js";const u=JSON.parse('{"title":"一、概述","description":"","frontmatter":{},"headers":[],"relativePath":"系统设计/正则表达式.md","filePath":"系统设计/正则表达式.md","lastUpdated":1711296414000}'),l={name:"系统设计/正则表达式.md"},n=s('<ul><li><a href="#一概述">一、概述</a></li><li><a href="#二匹配单个字符">二、匹配单个字符</a></li><li><a href="#三匹配一组字符">三、匹配一组字符</a></li><li><a href="#四使用元字符">四、使用元字符</a></li><li><a href="#五重复匹配">五、重复匹配</a></li><li><a href="#六位置匹配">六、位置匹配</a></li><li><a href="#七使用子表达式">七、使用子表达式</a></li><li><a href="#八回溯引用">八、回溯引用</a></li><li><a href="#九前后查找">九、前后查找</a></li><li><a href="#十嵌入条件">十、嵌入条件</a></li><li><a href="#参考资料">参考资料</a></li></ul><h1 id="一、概述" tabindex="-1">一、概述 <a class="header-anchor" href="#一、概述" aria-label="Permalink to &quot;一、概述&quot;">​</a></h1><p>正则表达式用于文本内容的查找和替换。</p><p>正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。</p><p><a href="https://regexr.com/" target="_blank" rel="noreferrer">正则表达式在线工具</a></p><h1 id="二、匹配单个字符" tabindex="-1">二、匹配单个字符 <a class="header-anchor" href="#二、匹配单个字符" aria-label="Permalink to &quot;二、匹配单个字符&quot;">​</a></h1><p><strong>.</strong> 可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；</p><p><strong>.</strong> 是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \\ 进行转义，即在 . 前面加上 \\ 。</p><p>正则表达式一般是区分大小写的，但是也有些实现是不区分。</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">nam.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">nam.</span></span></code></pre></div><p><strong>匹配结果</strong></p><p>My <strong>name</strong> is Zheng.</p><h1 id="三、匹配一组字符" tabindex="-1">三、匹配一组字符 <a class="header-anchor" href="#三、匹配一组字符" aria-label="Permalink to &quot;三、匹配一组字符&quot;">​</a></h1><p><strong>[ ]</strong> 定义一个字符集合；</p><p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。</p><p><strong>-</strong> 只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；</p><p><strong>^</strong> 在 [ ] 中是取非操作。</p><p><strong>应用</strong></p><p>匹配以 abc 为开头，并且最后一个字母不为数字的字符串：</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">abc[^0-9]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">abc[^0-9]</span></span></code></pre></div><p><strong>匹配结果</strong></p><ol><li><strong>abcd</strong></li><li>abc1</li><li>abc2</li></ol><h1 id="四、使用元字符" tabindex="-1">四、使用元字符 <a class="header-anchor" href="#四、使用元字符" aria-label="Permalink to &quot;四、使用元字符&quot;">​</a></h1><h2 id="匹配空白字符" tabindex="-1">匹配空白字符 <a class="header-anchor" href="#匹配空白字符" aria-label="Permalink to &quot;匹配空白字符&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">[\\b]</td><td style="text-align:center;">回退（删除）一个字符</td></tr><tr><td style="text-align:center;">\\f</td><td style="text-align:center;">换页符</td></tr><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行符</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">回车符</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">制表符</td></tr><tr><td style="text-align:center;">\\v</td><td style="text-align:center;">垂直制表符</td></tr></tbody></table><p>\\r\\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \\n。</p><p>\\r\\n\\r\\n 可以匹配 Windows 下的空白行，因为它匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</p><h2 id="匹配特定的字符类别" tabindex="-1">匹配特定的字符类别 <a class="header-anchor" href="#匹配特定的字符类别" aria-label="Permalink to &quot;匹配特定的字符类别&quot;">​</a></h2><h3 id="_1-数字元字符" tabindex="-1">1. 数字元字符 <a class="header-anchor" href="#_1-数字元字符" aria-label="Permalink to &quot;1. 数字元字符&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">数字字符，等价于 [0-9]</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">非数字字符，等价于 [^0-9]</td></tr></tbody></table><h3 id="_2-字母数字元字符" tabindex="-1">2. 字母数字元字符 <a class="header-anchor" href="#_2-字母数字元字符" aria-label="Permalink to &quot;2. 字母数字元字符&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">对 \\w 取非</td></tr></tbody></table><h3 id="_3-空白字符元字符" tabindex="-1">3. 空白字符元字符 <a class="header-anchor" href="#_3-空白字符元字符" aria-label="Permalink to &quot;3. 空白字符元字符&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">任何一个空白字符，等价于 [\\f\\n\\r\\t\\v]</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">对 \\s 取非</td></tr></tbody></table><p>\\x 匹配十六进制字符，\\0 匹配八进制，例如 \\x0A 对应 ASCII 字符 10，等价于 \\n。</p><h1 id="五、重复匹配" tabindex="-1">五、重复匹配 <a class="header-anchor" href="#五、重复匹配" aria-label="Permalink to &quot;五、重复匹配&quot;">​</a></h1><ul><li><strong>+</strong> 匹配 1 个或者多个字符</li><li>*<em>*</em> * 匹配 0 个或者多个</li><li><strong>?</strong> 匹配 0 个或者 1 个</li></ul><p><strong>应用</strong></p><p>匹配邮箱地址。</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[\\w.]+@\\w+\\.\\w+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[\\w.]+@\\w+\\.\\w+</span></span></code></pre></div><p>[\\w.] 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；</p><p><strong>匹配结果</strong></p><p><strong>abc.def<span>@</span>qq.com</strong></p><ul><li><strong>{n}</strong> 匹配 n 个字符</li><li><strong>{m, n}</strong> 匹配 m~n 个字符</li><li><strong>{m,}</strong> 至少匹配 m 个字符</li></ul><p>* 和 + 都是贪婪型元字符，会匹配尽可能多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m, n}? 。</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a.+c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a.+c</span></span></code></pre></div><p>由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。</p><p><strong>匹配结果</strong></p><p><strong>abcabcabc</strong></p><h1 id="六、位置匹配" tabindex="-1">六、位置匹配 <a class="header-anchor" href="#六、位置匹配" aria-label="Permalink to &quot;六、位置匹配&quot;">​</a></h1><h2 id="单词边界" tabindex="-1">单词边界 <a class="header-anchor" href="#单词边界" aria-label="Permalink to &quot;单词边界&quot;">​</a></h2><p><strong>\\b</strong> 可以匹配一个单词的边界，边界是指位于 \\w 和 \\W 之间的位置；<strong>\\B</strong> 匹配一个不是单词边界的位置。</p><p>\\b 只匹配位置，不匹配字符，因此 \\babc\\b 匹配出来的结果为 3 个字符。</p><h2 id="字符串边界" tabindex="-1">字符串边界 <a class="header-anchor" href="#字符串边界" aria-label="Permalink to &quot;字符串边界&quot;">​</a></h2><p><strong>^</strong> 匹配整个字符串的开头，<strong>$</strong> 匹配结尾。</p><p>^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</p><p>分行匹配模式（multiline）下，换行被当做字符串的边界。</p><p><strong>应用</strong></p><p>匹配代码中以 // 开始的注释行</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">^\\s*\\/\\/.*$</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">^\\s*\\/\\/.*$</span></span></code></pre></div><p><strong>匹配结果</strong></p><ol><li>public void fun() {</li><li>     <strong>// 注释 1</strong></li><li>     int a = 1;</li><li>     int b = 2;</li><li>     <strong>// 注释 2</strong></li><li>     int c = a + b;</li><li>}</li></ol><h1 id="七、使用子表达式" tabindex="-1">七、使用子表达式 <a class="header-anchor" href="#七、使用子表达式" aria-label="Permalink to &quot;七、使用子表达式&quot;">​</a></h1><p>使用 <strong>( )</strong> 定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。</p><p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(ab){2,}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(ab){2,}</span></span></code></pre></div><p><strong>匹配结果</strong></p><p><strong>ababab</strong></p><p><strong>|</strong> 是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(19|20)\\d{2}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(19|20)\\d{2}</span></span></code></pre></div><p><strong>匹配结果</strong></p><ol><li><strong>1900</strong></li><li><strong>2010</strong></li><li>1020</li></ol><p><strong>应用</strong></p><p>匹配 IP 地址。</p><p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：</p><ul><li>一位数字</li><li>不以 0 开头的两位数字</li><li>1 开头的三位数</li><li>2 开头，第 2 位是 0-4 的三位数</li><li>25 开头，第 3 位是 0-5 的三位数</li></ul><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">((25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))\\.){3}(25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">((25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))\\.){3}(25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))</span></span></code></pre></div><p><strong>匹配结果</strong></p><ol><li><strong>192.168.0.1</strong></li><li>00.00.00.00</li><li>555.555.555.555</li></ol><h1 id="八、回溯引用" tabindex="-1">八、回溯引用 <a class="header-anchor" href="#八、回溯引用" aria-label="Permalink to &quot;八、回溯引用&quot;">​</a></h1><p>回溯引用使用 <strong>\\n</strong> 来引用某个子表达式，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。</p><p><strong>应用</strong></p><p>匹配 HTML 中合法的标题元素。</p><p><strong>正则表达式</strong></p><p>\\1 将回溯引用子表达式 (h[1-6]) 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;(h[1-6])&gt;\\w*?&lt;\\/\\1&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;(h[1-6])&gt;\\w*?&lt;\\/\\1&gt;</span></span></code></pre></div><p><strong>匹配结果</strong></p><ol><li><strong>&lt;h1&gt;x&lt;/h1&gt;</strong></li><li><strong>&lt;h2&gt;x&lt;/h2&gt;</strong></li><li>&lt;h3&gt;x&lt;/h1&gt;</li></ol><h2 id="替换" tabindex="-1">替换 <a class="header-anchor" href="#替换" aria-label="Permalink to &quot;替换&quot;">​</a></h2><p>需要用到两个正则表达式。</p><p><strong>应用</strong></p><p>修改电话号码格式。</p><p><strong>文本</strong></p><p>313-555-1234</p><p><strong>查找正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(\\d{3})(-)(\\d{3})(-)(\\d{4})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(\\d{3})(-)(\\d{3})(-)(\\d{4})</span></span></code></pre></div><p><strong>替换正则表达式</strong></p><p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">($1) $3-$5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">($1) $3-$5</span></span></code></pre></div><p><strong>结果</strong></p><p>(313) 555-1234</p><h2 id="大小写转换" tabindex="-1">大小写转换 <a class="header-anchor" href="#大小写转换" aria-label="Permalink to &quot;大小写转换&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\l</td><td style="text-align:center;">把下个字符转换为小写</td></tr><tr><td style="text-align:center;">\\u</td><td style="text-align:center;">把下个字符转换为大写</td></tr><tr><td style="text-align:center;">\\L</td><td style="text-align:center;">把\\L 和\\E 之间的字符全部转换为小写</td></tr><tr><td style="text-align:center;">\\U</td><td style="text-align:center;">把\\U 和\\E 之间的字符全部转换为大写</td></tr><tr><td style="text-align:center;">\\E</td><td style="text-align:center;">结束\\L 或者\\U</td></tr></tbody></table><p><strong>应用</strong></p><p>把文本的第二个和第三个字符转换为大写。</p><p><strong>文本</strong></p><p>abcd</p><p><strong>查找</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(\\w)(\\w{2})(\\w)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(\\w)(\\w{2})(\\w)</span></span></code></pre></div><p><strong>替换</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$1\\U$2\\E$3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$1\\U$2\\E$3</span></span></code></pre></div><p><strong>结果</strong></p><p>aBCd</p><h1 id="九、前后查找" tabindex="-1">九、前后查找 <a class="header-anchor" href="#九、前后查找" aria-label="Permalink to &quot;九、前后查找&quot;">​</a></h1><p>前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。向前查找用 <strong>?=</strong> 来定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 ?&lt;= 定义（注: javaScript 不支持向后匹配, java 对其支持也不完善）。</p><p><strong>应用</strong></p><p>查找出邮件地址 @ 字符前面的部分。</p><p><strong>正则表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">\\w+(?=@)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">\\w+(?=@)</span></span></code></pre></div><p><strong>结果</strong></p><p><strong>abc</strong> @qq.com</p><p>对向前和向后查找取非，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。</p><h1 id="十、嵌入条件" tabindex="-1">十、嵌入条件 <a class="header-anchor" href="#十、嵌入条件" aria-label="Permalink to &quot;十、嵌入条件&quot;">​</a></h1><h2 id="回溯引用条件" tabindex="-1">回溯引用条件 <a class="header-anchor" href="#回溯引用条件" aria-label="Permalink to &quot;回溯引用条件&quot;">​</a></h2><p>条件判断为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p><p><strong>正则表达式</strong></p><p>子表达式 (\\() 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 ) 匹配，也就是匹配右括号。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(\\()?abc(?(1)\\))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(\\()?abc(?(1)\\))</span></span></code></pre></div><p><strong>结果</strong></p><ol><li><strong>(abc)</strong></li><li><strong>abc</strong></li><li>(abc</li></ol><h2 id="前后查找条件" tabindex="-1">前后查找条件 <a class="header-anchor" href="#前后查找条件" aria-label="Permalink to &quot;前后查找条件&quot;">​</a></h2><p>条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p><p><strong>正则表达式</strong></p><p>?(?=-) 为前向查找条件，只有在以 - 为前向查找的结尾能匹配 \\d{5} ，才继续匹配 -\\d{4} 。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">\\d{5}(?(?=-)-\\d{4})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">\\d{5}(?(?=-)-\\d{4})</span></span></code></pre></div><p><strong>结果</strong></p><ol><li><strong>11111</strong></li><li>22222-</li><li><strong>33333-4444</strong></li></ol><h1 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h1><ul><li>BenForta. 正则表达式必知必会 [M]. 人民邮电出版社, 2007.</li></ul>',147),o=[n];function r(p,i,d,c,g,h){return e(),a("div",null,o)}const y=t(l,[["render",r]]);export{u as __pageData,y as default};
