import{_ as s,o as a,c as n,R as l}from"./chunks/framework.7FlijoJG.js";const u=JSON.parse('{"title":"集合元素删除","description":"","frontmatter":{"title":"集合元素删除","date":"2024-01-06T13:38:39.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"Java集合/集合元素删除.md","filePath":"Java集合/集合元素删除.md","lastUpdated":1711296414000}'),p={name:"Java集合/集合元素删除.md"},o=l(`<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>在 Java 中，如果在 foreach 循环里对某些集合元素进行元素的 remove/add 操作的时候，就会触发 fail-fast 机制，进而抛出 ConcurrentModificationException。</p><p>在 Java 的 foreach 循环（即 for-each 循环）中，其实是通过迭代器 Iterator 来遍历集合的。这种遍历方式被称为“快速失败（fail-fast）”。在使用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的结构发生了改变，那么就会抛出 ConcurrentModificationException 异常。</p><p>为什么会这样呢？这是因为 Iterator 在遍历的过程中维护了一个叫 modCount 的计数器，用来记录集合结构变化的次数。每次新建一个迭代器时，都会将这个计数器的值复制一份到自己这里。然后每次调用 next 方法遍历元素之前，都会检查一下自己记录的 modCount 和原集合的 modCount 是否一致，如果不一致，就会抛出 ConcurrentModificationException，这就是所谓的 fail-fast 机制。</p><hr><h2 id="详细" tabindex="-1">详细 <a class="header-anchor" href="#详细" aria-label="Permalink to &quot;详细&quot;">​</a></h2><p>foreach 循环在编译后确实是转换成了使用迭代器（Iterator）进行遍历。这其实就是因为 foreach 循环的内部实现机制。</p><p>当我们在遍历集合时，如果是直接使用 Iterator 遍历且想在遍历过程中移除元素，我们可以调用 Iterator 的 remove 方法。这个方法可以保证在移除元素的同时，不会抛出 ConcurrentModificationException 异常，因为它在移除元素后会及时的更新那个我们刚才讲的计数器 modCount，从而避免抛出异常。</p><p>然而，在 foreach 循环中，我们并没有直接的办法去使用这个 remove 方法（除非使用内部类或外部变量等方式在 forEach 中去保存 iterator 引用，但这样就失去了使用 foreach 的简洁性）。通常的 foreach 循环的使用方式类似如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; myList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">myList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String item </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> myList) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(item)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        myList.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(item);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; myList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">myList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">myList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String item </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> myList) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(item)) {</span></span>
<span class="line"><span style="color:#24292E;">        myList.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们试图在遍历集合的过程中直接调用集合的 remove 方法来移除一个元素，然而这样做并不会像调用 Iterator 的 remove 方法那样去更新 modCount 的值，所以当下次 Iterator 尝试去检查 modCount 时，就发现不匹配了，从而抛出 ConcurrentModificationException。</p><p>所以，总的来说，如果你需要在遍历过程中移除元素，那么建议直接使用 Iterator，并调用其 remove 方法。</p><h2 id="错误案例与正确案例" tabindex="-1">错误案例与正确案例 <a class="header-anchor" href="#错误案例与正确案例" aria-label="Permalink to &quot;错误案例与正确案例&quot;">​</a></h2><p>举两个使用迭代器的正确和错误的例子。</p><p>首先，来看一段错误的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; mylist </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">mylist.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mylist.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Python&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mylist.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C++&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String item </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mylist) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(item.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        mylist.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(item);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; mylist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">mylist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mylist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Python&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mylist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;C++&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String item </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mylist) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(item.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        mylist.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这段代码中，我们在遍历的同时尝试移除一个元素，这会抛出 ConcurrentModificationException，因为它违反了 fail-fast 原则。</p><p>那么，如何修改这段代码才能正确运行呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; mylist </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">mylist.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mylist.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Python&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mylist.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C++&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; it </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mylist.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(it.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(item.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        it.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; mylist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">mylist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mylist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Python&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mylist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;C++&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Iterator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; it </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mylist.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(it.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    String item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(item.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        it.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这段修改过的代码中，我们使用 Iterator 的 remove 方法来移除元素，这样就能避免 ConcurrentModificationException。</p><h2 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h2><p>让我们先看一下 ArrayList 的 remove 方法的源码。这个方法接收一个 index 参数，然后移除在这个索引位置的元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> E </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rangeCheck</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    modCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    E oldValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">elementData</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> numMoved </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (numMoved </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">arraycopy</span><span style="color:#E1E4E8;">(elementData, index</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, elementData, index,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         numMoved);</span></span>
<span class="line"><span style="color:#E1E4E8;">    elementData[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">size] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// clear to let GC do its work</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> oldValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rangeCheck</span><span style="color:#24292E;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    modCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    E oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numMoved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (numMoved </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(elementData, index</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, elementData, index,</span></span>
<span class="line"><span style="color:#24292E;">                         numMoved);</span></span>
<span class="line"><span style="color:#24292E;">    elementData[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">size] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// clear to let GC do its work</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldValue;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码中，modCount++ 是用来记录 ArrayList 结构发生改变的次数的。此外，就是一些内存拷贝和索引检查的操作了。</p><p>接下来我们再看一下 ArrayList 的迭代器（Iterator）的 remove 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastRet </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">checkForComodification</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         ArrayList.this.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(lastRet);</span></span>
<span class="line"><span style="color:#E1E4E8;">         cursor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastRet;</span></span>
<span class="line"><span style="color:#E1E4E8;">         lastRet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">         expectedModCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">     } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IndexOutOfBoundsException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConcurrentModificationException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastRet </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">checkForComodification</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         ArrayList.this.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(lastRet);</span></span>
<span class="line"><span style="color:#24292E;">         cursor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastRet;</span></span>
<span class="line"><span style="color:#24292E;">         lastRet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         expectedModCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> modCount;</span></span>
<span class="line"><span style="color:#24292E;">     } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IndexOutOfBoundsException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConcurrentModificationException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>可以看到，在调用 ArrayList 的 remove 方法移除元素后，Iterator 的 remove 方法做了一个额外的操作：<code>expectedModCount = modCount</code>。这个操作就是同步 Iterator 的内部记录的 modCount 值，也就是我们前面说的 expectedModCount，保持其与原集合的 modCount 保持同步。</p>`,27),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{u as __pageData,m as default};
