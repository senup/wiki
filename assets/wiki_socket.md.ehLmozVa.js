import{_ as s,o as n,c as a,R as l}from"./chunks/framework.7FlijoJG.js";const b=JSON.parse('{"title":"一、I/O 模型","description":"","frontmatter":{},"headers":[],"relativePath":"wiki/socket.md","filePath":"wiki/socket.md","lastUpdated":1700574435000}'),p={name:"wiki/socket.md"},o=l(`<ul><li><a href="#一io-模型">一、I/O 模型</a><ul><li><a href="#阻塞式-io">阻塞式 I/O</a></li><li><a href="#非阻塞式-io">非阻塞式 I/O</a></li><li><a href="#io-复用">I/O 复用</a></li><li><a href="#信号驱动-io">信号驱动 I/O</a></li><li><a href="#异步-io">异步 I/O</a></li><li><a href="#五大-io-模型比较">五大 I/O 模型比较</a></li></ul></li><li><a href="#二io-复用">二、I/O 复用</a><ul><li><a href="#select">select</a></li><li><a href="#poll">poll</a></li><li><a href="#比较">比较</a></li><li><a href="#epoll">epoll</a></li><li><a href="#工作模式">工作模式</a></li><li><a href="#应用场景">应用场景</a></li></ul></li><li><a href="#参考资料">参考资料</a></li></ul><h1 id="一、i-o-模型" tabindex="-1">一、I/O 模型 <a class="header-anchor" href="#一、i-o-模型" aria-label="Permalink to &quot;一、I/O 模型&quot;">​</a></h1><p>一个输入操作通常包括两个阶段：</p><ul><li>等待数据准备好</li><li>从内核向进程复制数据</li></ul><p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p><p>Unix 有五种 I/O 模型：</p><ul><li>阻塞式 I/O</li><li>非阻塞式 I/O</li><li>I/O 复用（select 和 poll）</li><li>信号驱动式 I/O（SIGIO）</li><li>异步 I/O（AIO）</li></ul><h2 id="阻塞式-i-o" tabindex="-1">阻塞式 I/O <a class="header-anchor" href="#阻塞式-i-o" aria-label="Permalink to &quot;阻塞式 I/O&quot;">​</a></h2><p>应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。</p><p>应该注意到，在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其它应用进程还可以执行，所以不消耗 CPU 时间，这种模型的 CPU 利用率会比较高。</p><p>下图中，recvfrom() 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">ssize_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recvfrom</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">buf</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">flags</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">src_addr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">socklen_t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">addrlen</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">ssize_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recvfrom</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">buf</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">src_addr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">socklen_t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">addrlen</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="非阻塞式-i-o" tabindex="-1">非阻塞式 I/O <a class="header-anchor" href="#非阻塞式-i-o" aria-label="Permalink to &quot;非阻塞式 I/O&quot;">​</a></h2><p>应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询（polling）。</p><p>由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。</p><h2 id="i-o-复用" tabindex="-1">I/O 复用 <a class="header-anchor" href="#i-o-复用" aria-label="Permalink to &quot;I/O 复用&quot;">​</a></h2><p>使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用 recvfrom 把数据从内核复制到进程中。</p><p>它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。</p><p>如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。</p><h2 id="信号驱动-i-o" tabindex="-1">信号驱动 I/O <a class="header-anchor" href="#信号驱动-i-o" aria-label="Permalink to &quot;信号驱动 I/O&quot;">​</a></h2><p>应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。</p><p>相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。</p><h2 id="异步-i-o" tabindex="-1">异步 I/O <a class="header-anchor" href="#异步-i-o" aria-label="Permalink to &quot;异步 I/O&quot;">​</a></h2><p>应用进程执行 aio_read 系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</p><p>异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。</p><h2 id="五大-i-o-模型比较" tabindex="-1">五大 I/O 模型比较 <a class="header-anchor" href="#五大-i-o-模型比较" aria-label="Permalink to &quot;五大 I/O 模型比较&quot;">​</a></h2><ul><li>同步 I/O：将数据从内核缓冲区复制到应用进程缓冲区的阶段，应用进程会阻塞。</li><li>异步 I/O：不会阻塞。</li></ul><p>阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O 都是同步 I/O，它们的主要区别在第一个阶段。</p><p>非阻塞式 I/O 、信号驱动 I/O 和异步 I/O 在第一阶段不会阻塞。</p><h1 id="二、i-o-复用" tabindex="-1">二、I/O 复用 <a class="header-anchor" href="#二、i-o-复用" aria-label="Permalink to &quot;二、I/O 复用&quot;">​</a></h1><p>select/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。</p><h2 id="select" tabindex="-1">select <a class="header-anchor" href="#select" aria-label="Permalink to &quot;select&quot;">​</a></h2><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">, fd_set </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">readfds</span><span style="color:#E1E4E8;">, fd_set </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">writefds</span><span style="color:#E1E4E8;">, fd_set </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">exceptfds</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> timeval </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">timeout</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">, fd_set </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">readfds</span><span style="color:#24292E;">, fd_set </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">writefds</span><span style="color:#24292E;">, fd_set </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">exceptfds</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> timeval </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">timeout</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义。</p><p>timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过 timeout。</p><p>成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fd_set fd_in, fd_out;</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> timeval tv;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Reset the sets</span></span>
<span class="line"><span style="color:#B392F0;">FD_ZERO</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">fd_in</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#B392F0;">FD_ZERO</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">fd_out</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock1 for input events</span></span>
<span class="line"><span style="color:#B392F0;">FD_SET</span><span style="color:#E1E4E8;">( sock1, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">fd_in</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock2 for output events</span></span>
<span class="line"><span style="color:#B392F0;">FD_SET</span><span style="color:#E1E4E8;">( sock2, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">fd_out</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Find out which socket has the largest numeric value as select requires it</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> largest_sock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sock1 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> sock2 </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> sock1 </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sock2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait up to 10 seconds</span></span>
<span class="line"><span style="color:#E1E4E8;">tv.tv_sec </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">tv.tv_usec </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Call the select</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">( largest_sock </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">fd_in</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">fd_out</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">tv</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Check if select actually succeed</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( ret </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// report error and abort</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( ret </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// timeout; no event detected</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#B392F0;">FD_ISSET</span><span style="color:#E1E4E8;">( sock1, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">fd_in ) )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// input event on sock1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#B392F0;">FD_ISSET</span><span style="color:#E1E4E8;">( sock2, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">fd_out ) )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// output event on sock2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fd_set fd_in, fd_out;</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> timeval tv;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Reset the sets</span></span>
<span class="line"><span style="color:#6F42C1;">FD_ZERO</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">fd_in</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#6F42C1;">FD_ZERO</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">fd_out</span><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock1 for input events</span></span>
<span class="line"><span style="color:#6F42C1;">FD_SET</span><span style="color:#24292E;">( sock1, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">fd_in</span><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock2 for output events</span></span>
<span class="line"><span style="color:#6F42C1;">FD_SET</span><span style="color:#24292E;">( sock2, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">fd_out</span><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Find out which socket has the largest numeric value as select requires it</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> largest_sock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sock1 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> sock2 </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> sock1 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sock2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait up to 10 seconds</span></span>
<span class="line"><span style="color:#24292E;">tv.tv_sec </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">tv.tv_usec </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Call the select</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">( largest_sock </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">fd_in</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">fd_out</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">tv</span><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Check if select actually succeed</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( ret </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// report error and abort</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( ret </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// timeout; no event detected</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#6F42C1;">FD_ISSET</span><span style="color:#24292E;">( sock1, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">fd_in ) )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// input event on sock1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#6F42C1;">FD_ISSET</span><span style="color:#24292E;">( sock2, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">fd_out ) )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// output event on sock2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="poll" tabindex="-1">poll <a class="header-anchor" href="#poll" aria-label="Permalink to &quot;poll&quot;">​</a></h2><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> pollfd </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nfds</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">timeout</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> pollfd </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">fds</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nfds</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">timeout</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>pollfd 使用链表实现。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// The structure for two events</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> pollfd </span><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock1 for input</span></span>
<span class="line"><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sock1;</span></span>
<span class="line"><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].events </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> POLLIN;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock2 for output</span></span>
<span class="line"><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sock2;</span></span>
<span class="line"><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].events </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> POLLOUT;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait 10 seconds</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#6A737D;">// Check if poll actually succeed</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( ret </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// report error and abort</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( ret </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// timeout; no event detected</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If we detect the event, zero it out so we can reuse the structure</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].revents </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> POLLIN )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].revents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// input event on sock1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].revents </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> POLLOUT )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">fds</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].revents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// output event on sock2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// The structure for two events</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> pollfd </span><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock1 for input</span></span>
<span class="line"><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sock1;</span></span>
<span class="line"><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].events </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> POLLIN;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor sock2 for output</span></span>
<span class="line"><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sock2;</span></span>
<span class="line"><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].events </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> POLLOUT;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait 10 seconds</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">fds</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#6A737D;">// Check if poll actually succeed</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( ret </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// report error and abort</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( ret </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// timeout; no event detected</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If we detect the event, zero it out so we can reuse the structure</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].revents </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> POLLIN )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].revents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// input event on sock1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].revents </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> POLLOUT )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">fds</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].revents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// output event on sock2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="比较" tabindex="-1">比较 <a class="header-anchor" href="#比较" aria-label="Permalink to &quot;比较&quot;">​</a></h2><h3 id="_1-功能" tabindex="-1">1. 功能 <a class="header-anchor" href="#_1-功能" aria-label="Permalink to &quot;1. 功能&quot;">​</a></h3><p>select 和 poll 的功能基本相同，不过在一些实现细节上有所不同。</p><ul><li>select 会修改描述符，而 poll 不会；</li><li>select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 的描述符类型使用链表实现，没有描述符数量的限制；</li><li>poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。</li><li>如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。</li></ul><h3 id="_2-速度" tabindex="-1">2. 速度 <a class="header-anchor" href="#_2-速度" aria-label="Permalink to &quot;2. 速度&quot;">​</a></h3><p>select 和 poll 速度都比较慢。</p><ul><li>select 和 poll 每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。</li><li>select 和 poll 的返回结果中没有声明哪些描述符已经准备好，所以如果返回值大于 0 时，应用进程都需要使用轮询的方式来找到 I/O 完成的描述符。</li></ul><h3 id="_3-可移植性" tabindex="-1">3. 可移植性 <a class="header-anchor" href="#_3-可移植性" aria-label="Permalink to &quot;3. 可移植性&quot;">​</a></h3><p>几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。</p><h2 id="epoll" tabindex="-1">epoll <a class="header-anchor" href="#epoll" aria-label="Permalink to &quot;epoll&quot;">​</a></h2><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_create</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">epfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">op</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">fd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> epoll_event </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">)；</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_wait</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">epfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> epoll_event </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">events</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">maxevents</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">timeout</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_create</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">epfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">op</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> epoll_event </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">event</span><span style="color:#24292E;">)；</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_wait</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">epfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> epoll_event </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">events</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">maxevents</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">timeout</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符。</p><p>从上面的描述可以看出，epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。</p><p>epoll 仅适用于 Linux OS。</p><p>epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。</p><p>epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets.</span></span>
<span class="line"><span style="color:#6A737D;">// The function argument is ignored (it was not before, but now it is), so put your favorite number here</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pollingfd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_create</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">CAFE</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( pollingfd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// report error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize the epoll structure in case more members are added in future</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> epoll_event ev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Associate the connection class instance with the event. You can associate anything</span></span>
<span class="line"><span style="color:#6A737D;">// you want, epoll does not use this information. We store a connection class pointer, pConnection1</span></span>
<span class="line"><span style="color:#E1E4E8;">ev.data.ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pConnection1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor for input, and do not automatically rearm the descriptor after the event</span></span>
<span class="line"><span style="color:#E1E4E8;">ev.events </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EPOLLIN </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> EPOLLONESHOT;</span></span>
<span class="line"><span style="color:#6A737D;">// Add the descriptor into the monitoring list. We can do it even if another thread is</span></span>
<span class="line"><span style="color:#6A737D;">// waiting in epoll_wait - the descriptor will be properly added</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">( epollfd, EPOLL_CTL_ADD, pConnection1</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getSocket</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;"> ) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// report error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen)</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> epoll_event </span><span style="color:#FFAB70;">pevents</span><span style="color:#E1E4E8;">[ </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ready </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_wait</span><span style="color:#E1E4E8;">( pollingfd, pevents, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#6A737D;">// Check if epoll actually succeed</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( ret </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// report error and abort</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( ret </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// timeout; no event detected</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Check if any events detected</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ( </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ret; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#FFAB70;">pevents</span><span style="color:#E1E4E8;">[i].events </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> EPOLLIN )</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// Get back our connection pointer</span></span>
<span class="line"><span style="color:#E1E4E8;">            Connection </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Connection</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#FFAB70;">pevents</span><span style="color:#E1E4E8;">[i].data.ptr;</span></span>
<span class="line"><span style="color:#E1E4E8;">            c-&gt;</span><span style="color:#B392F0;">handleReadEvent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets.</span></span>
<span class="line"><span style="color:#6A737D;">// The function argument is ignored (it was not before, but now it is), so put your favorite number here</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pollingfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_create</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">CAFE</span><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( pollingfd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// report error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Initialize the epoll structure in case more members are added in future</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> epoll_event ev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Associate the connection class instance with the event. You can associate anything</span></span>
<span class="line"><span style="color:#6A737D;">// you want, epoll does not use this information. We store a connection class pointer, pConnection1</span></span>
<span class="line"><span style="color:#24292E;">ev.data.ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pConnection1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Monitor for input, and do not automatically rearm the descriptor after the event</span></span>
<span class="line"><span style="color:#24292E;">ev.events </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EPOLLIN </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> EPOLLONESHOT;</span></span>
<span class="line"><span style="color:#6A737D;">// Add the descriptor into the monitoring list. We can do it even if another thread is</span></span>
<span class="line"><span style="color:#6A737D;">// waiting in epoll_wait - the descriptor will be properly added</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">( epollfd, EPOLL_CTL_ADD, pConnection1</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getSocket</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">ev</span><span style="color:#24292E;"> ) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// report error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen)</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> epoll_event </span><span style="color:#E36209;">pevents</span><span style="color:#24292E;">[ </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ready </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_wait</span><span style="color:#24292E;">( pollingfd, pevents, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#6A737D;">// Check if epoll actually succeed</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( ret </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// report error and abort</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( ret </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// timeout; no event detected</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Check if any events detected</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ( </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ret; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#E36209;">pevents</span><span style="color:#24292E;">[i].events </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> EPOLLIN )</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Get back our connection pointer</span></span>
<span class="line"><span style="color:#24292E;">            Connection </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Connection</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#E36209;">pevents</span><span style="color:#24292E;">[i].data.ptr;</span></span>
<span class="line"><span style="color:#24292E;">            c-&gt;</span><span style="color:#6F42C1;">handleReadEvent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="工作模式" tabindex="-1">工作模式 <a class="header-anchor" href="#工作模式" aria-label="Permalink to &quot;工作模式&quot;">​</a></h2><p>epoll 的描述符事件有两种触发模式：LT（level trigger）和 ET（edge trigger）。</p><h3 id="_1-lt-模式" tabindex="-1">1. LT 模式 <a class="header-anchor" href="#_1-lt-模式" aria-label="Permalink to &quot;1. LT 模式&quot;">​</a></h3><p>当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p><h3 id="_2-et-模式" tabindex="-1">2. ET 模式 <a class="header-anchor" href="#_2-et-模式" aria-label="Permalink to &quot;2. ET 模式&quot;">​</a></h3><p>和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。</p><p>很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。</p><h3 id="_1-select-应用场景" tabindex="-1">1. select 应用场景 <a class="header-anchor" href="#_1-select-应用场景" aria-label="Permalink to &quot;1. select 应用场景&quot;">​</a></h3><p>select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制。</p><p>select 可移植性更好，几乎被所有主流平台所支持。</p><h3 id="_2-poll-应用场景" tabindex="-1">2. poll 应用场景 <a class="header-anchor" href="#_2-poll-应用场景" aria-label="Permalink to &quot;2. poll 应用场景&quot;">​</a></h3><p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p><h3 id="_3-epoll-应用场景" tabindex="-1">3. epoll 应用场景 <a class="header-anchor" href="#_3-epoll-应用场景" aria-label="Permalink to &quot;3. epoll 应用场景&quot;">​</a></h3><p>只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。</p><p>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</p><p>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且 epoll 的描述符存储在内核，不容易调试。</p><h1 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h1><ul><li>Stevens W R, Fenner B, Rudoff A M. UNIX network programming[M]. Addison-Wesley Professional, 2004.</li><li><a href="https://www.ibm.com/developerworks/linux/library/l-async/" target="_blank" rel="noreferrer">Boost application performance using asynchronous I/O</a></li><li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365683(v=vs.85).aspx" target="_blank" rel="noreferrer">Synchronous and Asynchronous I/O</a></li><li><a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noreferrer">Linux IO 模式及 select、poll、epoll 详解</a></li><li><a href="https://daniel.haxx.se/docs/poll-vs-select.html" target="_blank" rel="noreferrer">poll vs select vs event-based</a></li><li><a href="http://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/" target="_blank" rel="noreferrer">select / poll / epoll: practical difference for system architects</a></li><li><a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/" target="_blank" rel="noreferrer">Browse the source code of userspace/glibc/sysdeps/unix/sysv/linux/ online</a></li></ul>`,78),e=[o];function t(r,c,y,i,E,d){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{b as __pageData,F as default};
