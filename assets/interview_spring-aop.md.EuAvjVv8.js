import{_ as s,o as n,c as a,R as p}from"./chunks/framework.7FlijoJG.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/spring-aop.md","filePath":"interview/spring-aop.md","lastUpdated":1700618398000}'),l={name:"interview/spring-aop.md"},o=p(`<p>本文不会像 IOC 源码分析那篇文章一样，很具体地分析每一行 Spring AOP 的源码，目标读者是已经知道 Spring IOC 源码是怎么回事的读者，因为 Spring AOP 终归是依赖于 IOC 容器来管理的。</p><p>Spring AOP 的源码并不简单，因为它多，所以阅读源码最好就是找到一个分支，追踪下去。<strong>本文定位为走马观花，看个大概，不具体到每一个细节。</strong></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>这一节，我们先来&quot;猜猜&quot; Spring 是怎么实现 AOP 的。</p><p>在 Spring 的容器中，我们面向的对象是一个个的 bean 实例，bean 是什么？我们可以简单理解为是 BeanDefinition 的实例，Spring 会根据 BeanDefinition 中的信息为我们生产合适的 bean 实例出来。</p><p>当我们需要使用 bean 的时候，通过 IOC 容器的 getBean(…) 方法从容器中获取 bean 实例，只不过大部分的场景下，我们都用了依赖注入，所以很少手动调用 getBean(...) 方法。</p><p>Spring AOP 的原理很简单，就是<strong>动态代理</strong>，它和 AspectJ 不一样，AspectJ 是直接修改掉你的字节码。</p><p>代理模式很简单，接口 + 真实实现类 + 代理类，其中 真实实现类 和 代理类 都要实现接口，实例化的时候要使用代理类。所以，Spring AOP 需要做的是生成这么一个代理类，然后<strong>替换掉</strong>真实实现类来对外提供服务。</p><p>替换的过程怎么理解呢？在 Spring IOC 容器中非常容易实现，就是在 getBean(…) 的时候返回的实际上是代理类的实例，而这个代理类我们自己没写代码，它是 Spring 采用 JDK Proxy 或 CGLIB 动态生成的。</p><blockquote><p>getBean(…) 方法用于查找或实例化容器中的 bean，这也是为什么 Spring AOP 只能作用于 Spring 容器中的 bean 的原因，对于不是使用 IOC 容器管理的对象，Spring AOP 是无能为力的。</p></blockquote><h2 id="本文使用的调试代码" tabindex="-1">本文使用的调试代码 <a class="header-anchor" href="#本文使用的调试代码" aria-label="Permalink to &quot;本文使用的调试代码&quot;">​</a></h2><p>阅读源码很好用的一个方法就是跑代码来调试，因为自己一行一行地看的话，比较枯燥，而且难免会漏掉一些东西。</p><p>下面，我们先准备一些简单的调试用的代码。</p><p>首先先定义两个 Service 接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// OrderService.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Order </span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">product</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Order </span><span style="color:#B392F0;">queryOrder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// UserService.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    User </span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">firstName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">lastName</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">age</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    User </span><span style="color:#B392F0;">queryUser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// OrderService.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Order </span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">product</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Order </span><span style="color:#6F42C1;">queryOrder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// UserService.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    User </span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">firstName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">lastName</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    User </span><span style="color:#6F42C1;">queryUser</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，分别来一个接口实现类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// OrderServiceImpl.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">product</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(username);</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setProduct</span><span style="color:#E1E4E8;">(product);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">queryOrder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setProduct</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// UserServiceImpl.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">firstName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">lastName</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">age</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setFirstName</span><span style="color:#E1E4E8;">(firstName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setLastName</span><span style="color:#E1E4E8;">(lastName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setAge</span><span style="color:#E1E4E8;">(age);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">queryUser</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setFirstName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setLastName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">setAge</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// OrderServiceImpl.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">product</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(username);</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setProduct</span><span style="color:#24292E;">(product);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">queryOrder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setProduct</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// UserServiceImpl.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">firstName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">lastName</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setFirstName</span><span style="color:#24292E;">(firstName);</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setLastName</span><span style="color:#24292E;">(lastName);</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(age);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">queryUser</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setFirstName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setLastName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>写两个 Advice：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LogArgsAdvice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodBeforeAdvice</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">before</span><span style="color:#E1E4E8;">(Method </span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;准备执行方法: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, 参数列表：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(args));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogArgsAdvice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodBeforeAdvice</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">(Method </span><span style="color:#E36209;">method</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">target</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;准备执行方法: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, 参数列表：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(args));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LogResultAdvice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AfterReturningAdvice</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterReturning</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">returnValue</span><span style="color:#E1E4E8;">, Method </span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;方法返回：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> returnValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogResultAdvice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AfterReturningAdvice</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterReturning</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">returnValue</span><span style="color:#24292E;">, Method </span><span style="color:#E36209;">method</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">target</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;方法返回：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> returnValue);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>配置一下：</p><p><img src="https://www.javadoop.com/blogimages/spring-aop-source/2.png" alt="2"></p><blockquote><p>我们这边使用了前面文章介绍的配置 Advisor 的方式，我们回顾一下。</p><p>每个 advisor 内部持有 advice 实例，advisor 负责匹配，内部的 advice 负责实现拦截处理。配置了各个 advisor 后，配置 DefaultAdvisorAutoProxyCreator 使得所有的 advisor 配置自动生效。</p></blockquote><p>启动：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringAopSourceApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 启动 Spring 的 IOC 容器</span></span>
<span class="line"><span style="color:#E1E4E8;">      ApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassPathXmlApplicationContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:DefaultAdvisorAutoProxy.xml&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      UserService userService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(UserService.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">      OrderService orderService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(OrderService.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      userService.</span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Cruise&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      userService.</span><span style="color:#B392F0;">queryUser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      orderService.</span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Leo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;随便买点什么&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      orderService.</span><span style="color:#B392F0;">queryOrder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Leo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringAopSourceApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 启动 Spring 的 IOC 容器</span></span>
<span class="line"><span style="color:#24292E;">      ApplicationContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;classpath:DefaultAdvisorAutoProxy.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      UserService userService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(UserService.class);</span></span>
<span class="line"><span style="color:#24292E;">      OrderService orderService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(OrderService.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      userService.</span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Tom&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Cruise&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      userService.</span><span style="color:#6F42C1;">queryUser</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      orderService.</span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Leo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;随便买点什么&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      orderService.</span><span style="color:#6F42C1;">queryOrder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Leo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">准备执行方法</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> createUser, 参数列表：[Tom, Cruise, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">queryUser方法返回：User{firstName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, lastName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, address</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;null&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">准备执行方法</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> createOrder, 参数列表：[Leo, 随便买点什么]</span></span>
<span class="line"><span style="color:#E1E4E8;">queryOrder方法返回：Order{username</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, product</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">准备执行方法</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> createUser, 参数列表：[Tom, Cruise, </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">queryUser方法返回：User{firstName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, lastName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, address</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;null&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">准备执行方法</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> createOrder, 参数列表：[Leo, 随便买点什么]</span></span>
<span class="line"><span style="color:#24292E;">queryOrder方法返回：Order{username</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, product</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>从输出结果，我们可以看到：</p><p>LogArgsAdvice 作用于 UserService#createUser(…) 和 OrderService#createOrder(…) 两个方法；</p><p>LogResultAdvice 作用于 UserService#queryUser() 和 OrderService#queryOrder(…) 两个方法；</p></blockquote><p>下面的代码分析中，我们将基于这个简单的例子来介绍。</p><h2 id="ioc-容器管理-aop-实例" tabindex="-1">IOC 容器管理 AOP 实例 <a class="header-anchor" href="#ioc-容器管理-aop-实例" aria-label="Permalink to &quot;IOC 容器管理 AOP 实例&quot;">​</a></h2><p>本节介绍 Spring AOP 是怎么作用于 IOC 容器中的 bean 的。</p><p><a href="/wiki/post/spring-aop-intro.html">Spring AOP 的使用介绍</a> 那篇文章已经介绍过 DefaultAdvisorAutoProxyCreator 类了，它能实现自动将所有的 advisor 生效。</p><p>我们来追踪下 DefaultAdvisorAutoProxyCreator 类，看看它是怎么一步步实现的动态代理。然后在这个基础上，我们再简单追踪下 @AspectJ 配置方式下的源码实现。</p><p>首先，先看下 DefaultAdvisorAutoProxyCreator 的继承结构：</p><p><img src="https://www.javadoop.com/blogimages/spring-aop-source/1.png" alt="1"></p><p>我们可以发现，DefaultAdvisorAutoProxyCreator 最后居然是一个 <strong>BeanPostProcessor</strong>，在 Spring IOC 源码分析的时候说过，BeanPostProcessor 的两个方法，分别在 init-method 的前后得到执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanPostProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Object </span><span style="color:#B392F0;">postProcessBeforeInitialization</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	Object </span><span style="color:#B392F0;">postProcessAfterInitialization</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanPostProcessor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Object </span><span style="color:#6F42C1;">postProcessBeforeInitialization</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">bean</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">beanName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"><span style="color:#24292E;">	Object </span><span style="color:#6F42C1;">postProcessAfterInitialization</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">bean</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">beanName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里再贴一下 IOC 的源码，我们回顾一下：</p><p>// AbstractAutowireCapableBeanFactory</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">doCreateBean</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String beanName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RootBeanDefinition mbd, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args)</span></span>
<span class="line"><span style="color:#E1E4E8;">			throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Instantiate the bean.</span></span>
<span class="line"><span style="color:#E1E4E8;">	BeanWrapper instanceWrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		instanceWrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.factoryBeanInstanceCache.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instanceWrapper </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1. 创建实例</span></span>
<span class="line"><span style="color:#E1E4E8;">		instanceWrapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBeanInstance</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Initialize the bean instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">	Object exposedObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2. 装载属性</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">populateBean</span><span style="color:#E1E4E8;">(beanName, mbd, instanceWrapper);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (exposedObject </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 3. 初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">			exposedObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initializeBean</span><span style="color:#E1E4E8;">(beanName, exposedObject, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">doCreateBean</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String beanName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RootBeanDefinition mbd, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args)</span></span>
<span class="line"><span style="color:#24292E;">			throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Instantiate the bean.</span></span>
<span class="line"><span style="color:#24292E;">	BeanWrapper instanceWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		instanceWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.factoryBeanInstanceCache.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instanceWrapper </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1. 创建实例</span></span>
<span class="line"><span style="color:#24292E;">		instanceWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBeanInstance</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Initialize the bean instance.</span></span>
<span class="line"><span style="color:#24292E;">	Object exposedObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2. 装载属性</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">populateBean</span><span style="color:#24292E;">(beanName, mbd, instanceWrapper);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (exposedObject </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3. 初始化</span></span>
<span class="line"><span style="color:#24292E;">			exposedObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initializeBean</span><span style="color:#24292E;">(beanName, exposedObject, mbd);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面第 3 步 initializeBean(...) 方法中会调用 BeanPostProcessor 中的方法，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">initializeBean</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String beanName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object bean, RootBeanDefinition mbd) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object wrappedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mbd.</span><span style="color:#B392F0;">isSynthetic</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 1. 执行每一个 BeanPostProcessor 的 postProcessBeforeInitialization 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">      wrappedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyBeanPostProcessorsBeforeInitialization</span><span style="color:#E1E4E8;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 调用 bean 配置中的 init-method=&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">invokeInitMethods</span><span style="color:#E1E4E8;">(beanName, wrappedBean, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mbd.</span><span style="color:#B392F0;">isSynthetic</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 我们关注的重点是这里！！！</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 2. 执行每一个 BeanPostProcessor 的 postProcessAfterInitialization 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">      wrappedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyBeanPostProcessorsAfterInitialization</span><span style="color:#E1E4E8;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrappedBean;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">initializeBean</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String beanName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object bean, RootBeanDefinition mbd) {</span></span>
<span class="line"><span style="color:#24292E;">   ...</span></span>
<span class="line"><span style="color:#24292E;">   Object wrappedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mbd.</span><span style="color:#6F42C1;">isSynthetic</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 1. 执行每一个 BeanPostProcessor 的 postProcessBeforeInitialization 方法</span></span>
<span class="line"><span style="color:#24292E;">      wrappedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyBeanPostProcessorsBeforeInitialization</span><span style="color:#24292E;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 调用 bean 配置中的 init-method=&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">invokeInitMethods</span><span style="color:#24292E;">(beanName, wrappedBean, mbd);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   ...</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mbd.</span><span style="color:#6F42C1;">isSynthetic</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 我们关注的重点是这里！！！</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 2. 执行每一个 BeanPostProcessor 的 postProcessAfterInitialization 方法</span></span>
<span class="line"><span style="color:#24292E;">      wrappedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyBeanPostProcessorsAfterInitialization</span><span style="color:#24292E;">(wrappedBean, beanName);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrappedBean;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>也就是说，Spring AOP 会在 IOC 容器创建 bean 实例的最后对 bean 进行处理。其实就是在这一步进行代理增强。</p><p>我们回过头来，DefaultAdvisorAutoProxyCreator 的继承结构中，postProcessAfterInitialization() 方法在其父类 AbstractAutoProxyCreator 这一层被覆写了：</p><p>// AbstractAutoProxyCreator</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">postProcessAfterInitialization</span><span style="color:#E1E4E8;">(Object bean, String beanName) throws BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object cacheKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCacheKey</span><span style="color:#E1E4E8;">(bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.earlyProxyReferences.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(cacheKey)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapIfNecessary</span><span style="color:#E1E4E8;">(bean, beanName, cacheKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">postProcessAfterInitialization</span><span style="color:#24292E;">(Object bean, String beanName) throws BeansException {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bean </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      Object cacheKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCacheKey</span><span style="color:#24292E;">(bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), beanName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.earlyProxyReferences.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(cacheKey)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapIfNecessary</span><span style="color:#24292E;">(bean, beanName, cacheKey);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>继续往里看 wrapIfNecessary(...) 方法，这个方法将返回代理类（如果需要的话）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">wrapIfNecessary</span><span style="color:#E1E4E8;">(Object bean, String beanName, Object cacheKey) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (beanName </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.targetSourcedBeans.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Boolean.FALSE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advisedBeans.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(cacheKey))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isInfrastructureClass</span><span style="color:#E1E4E8;">(bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shouldSkip</span><span style="color:#E1E4E8;">(bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advisedBeans.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 返回匹配当前 bean 的所有的 advisor、advice、interceptor</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 对于本文的例子，&quot;userServiceImpl&quot; 和 &quot;OrderServiceImpl&quot; 这两个 bean 创建过程中，</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//   到这边的时候都会返回两个 advisor</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] specificInterceptors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAdvicesAndAdvisorsForBean</span><span style="color:#E1E4E8;">(bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), beanName, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (specificInterceptors </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> DO_NOT_PROXY) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advisedBeans.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(cacheKey, Boolean.TRUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建代理...创建代理...创建代理...</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProxy</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), beanName, specificInterceptors, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SingletonTargetSource</span><span style="color:#E1E4E8;">(bean));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.proxyTypes.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(cacheKey, proxy.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advisedBeans.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">wrapIfNecessary</span><span style="color:#24292E;">(Object bean, String beanName, Object cacheKey) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (beanName </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.targetSourcedBeans.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Boolean.FALSE.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advisedBeans.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(cacheKey))) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isInfrastructureClass</span><span style="color:#24292E;">(bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shouldSkip</span><span style="color:#24292E;">(bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advisedBeans.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 返回匹配当前 bean 的所有的 advisor、advice、interceptor</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 对于本文的例子，&quot;userServiceImpl&quot; 和 &quot;OrderServiceImpl&quot; 这两个 bean 创建过程中，</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//   到这边的时候都会返回两个 advisor</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] specificInterceptors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAdvicesAndAdvisorsForBean</span><span style="color:#24292E;">(bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), beanName, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (specificInterceptors </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> DO_NOT_PROXY) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advisedBeans.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cacheKey, Boolean.TRUE);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 创建代理...创建代理...创建代理...</span></span>
<span class="line"><span style="color:#24292E;">      Object proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), beanName, specificInterceptors, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SingletonTargetSource</span><span style="color:#24292E;">(bean));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.proxyTypes.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cacheKey, proxy.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxy;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advisedBeans.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里有两个点提一下：</p><p>getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)，这个方法将得到所有的<strong>可用于拦截当前 bean 的</strong> advisor、advice、interceptor。</p><p>另一个就是 TargetSource 这个概念，它用于封装真实实现类的信息，上面用了 SingletonTargetSource 这个实现类，其实我们这里也不太需要关心这个，知道有这么回事就可以了。</p><p>我们继续往下看 createProxy(…) 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 注意看这个方法的几个参数，</span></span>
<span class="line"><span style="color:#6A737D;">//   第三个参数携带了所有的 advisors</span></span>
<span class="line"><span style="color:#6A737D;">//   第四个参数 targetSource 携带了真实实现的信息</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">createProxy</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> beanClass, String beanName, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] specificInterceptors, TargetSource targetSource) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.beanFactory </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ConfigurableListableBeanFactory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      AutoProxyUtils.</span><span style="color:#B392F0;">exposeTargetClass</span><span style="color:#E1E4E8;">((ConfigurableListableBeanFactory) </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.beanFactory, beanName, beanClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 创建 ProxyFactory 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">   ProxyFactory proxyFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProxyFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   proxyFactory.</span><span style="color:#B392F0;">copyFrom</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 在 schema-based 的配置方式中，我们介绍过，如果希望使用 CGLIB 来代理接口，可以配置</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// proxy-target-class=&quot;true&quot;,这样不管有没有接口，都使用 CGLIB 来生成代理：</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//   &lt;aop:config proxy-target-class=&quot;true&quot;&gt;......&lt;/aop:config&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">proxyFactory.</span><span style="color:#B392F0;">isProxyTargetClass</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">shouldProxyTargetClass</span><span style="color:#E1E4E8;">(beanClass, beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         proxyFactory.</span><span style="color:#B392F0;">setProxyTargetClass</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 点进去稍微看一下代码就知道了，主要就两句：</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 1. 有接口的，调用一次或多次：proxyFactory.addInterface(ifc);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 2. 没有接口的，调用：proxyFactory.setProxyTargetClass(true);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">evaluateProxyInterfaces</span><span style="color:#E1E4E8;">(beanClass, proxyFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 这个方法会返回匹配了当前 bean 的 advisors 数组</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 对于本文的例子，&quot;userServiceImpl&quot; 和 &quot;OrderServiceImpl&quot; 到这边的时候都会返回两个 advisor</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 注意：如果 specificInterceptors 中有 advice 和 interceptor，它们也会被包装成 advisor，进去看下源码就清楚了</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">Advisor</span><span style="color:#E1E4E8;">[] advisors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildAdvisors</span><span style="color:#E1E4E8;">(beanName, specificInterceptors);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Advisor advisor </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> advisors) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      proxyFactory.</span><span style="color:#B392F0;">addAdvisor</span><span style="color:#E1E4E8;">(advisor);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   proxyFactory.</span><span style="color:#B392F0;">setTargetSource</span><span style="color:#E1E4E8;">(targetSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">customizeProxyFactory</span><span style="color:#E1E4E8;">(proxyFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   proxyFactory.</span><span style="color:#B392F0;">setFrozen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.freezeProxy);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">advisorsPreFiltered</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      proxyFactory.</span><span style="color:#B392F0;">setPreFiltered</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxyFactory.</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getProxyClassLoader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注意看这个方法的几个参数，</span></span>
<span class="line"><span style="color:#6A737D;">//   第三个参数携带了所有的 advisors</span></span>
<span class="line"><span style="color:#6A737D;">//   第四个参数 targetSource 携带了真实实现的信息</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> beanClass, String beanName, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] specificInterceptors, TargetSource targetSource) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.beanFactory </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ConfigurableListableBeanFactory) {</span></span>
<span class="line"><span style="color:#24292E;">      AutoProxyUtils.</span><span style="color:#6F42C1;">exposeTargetClass</span><span style="color:#24292E;">((ConfigurableListableBeanFactory) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.beanFactory, beanName, beanClass);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 创建 ProxyFactory 实例</span></span>
<span class="line"><span style="color:#24292E;">   ProxyFactory proxyFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProxyFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   proxyFactory.</span><span style="color:#6F42C1;">copyFrom</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 在 schema-based 的配置方式中，我们介绍过，如果希望使用 CGLIB 来代理接口，可以配置</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// proxy-target-class=&quot;true&quot;,这样不管有没有接口，都使用 CGLIB 来生成代理：</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//   &lt;aop:config proxy-target-class=&quot;true&quot;&gt;......&lt;/aop:config&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">proxyFactory.</span><span style="color:#6F42C1;">isProxyTargetClass</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">shouldProxyTargetClass</span><span style="color:#24292E;">(beanClass, beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">         proxyFactory.</span><span style="color:#6F42C1;">setProxyTargetClass</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 点进去稍微看一下代码就知道了，主要就两句：</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 1. 有接口的，调用一次或多次：proxyFactory.addInterface(ifc);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 2. 没有接口的，调用：proxyFactory.setProxyTargetClass(true);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">evaluateProxyInterfaces</span><span style="color:#24292E;">(beanClass, proxyFactory);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 这个方法会返回匹配了当前 bean 的 advisors 数组</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 对于本文的例子，&quot;userServiceImpl&quot; 和 &quot;OrderServiceImpl&quot; 到这边的时候都会返回两个 advisor</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 注意：如果 specificInterceptors 中有 advice 和 interceptor，它们也会被包装成 advisor，进去看下源码就清楚了</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">Advisor</span><span style="color:#24292E;">[] advisors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildAdvisors</span><span style="color:#24292E;">(beanName, specificInterceptors);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Advisor advisor </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> advisors) {</span></span>
<span class="line"><span style="color:#24292E;">      proxyFactory.</span><span style="color:#6F42C1;">addAdvisor</span><span style="color:#24292E;">(advisor);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   proxyFactory.</span><span style="color:#6F42C1;">setTargetSource</span><span style="color:#24292E;">(targetSource);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">customizeProxyFactory</span><span style="color:#24292E;">(proxyFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   proxyFactory.</span><span style="color:#6F42C1;">setFrozen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.freezeProxy);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">advisorsPreFiltered</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      proxyFactory.</span><span style="color:#6F42C1;">setPreFiltered</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxyFactory.</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getProxyClassLoader</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到，这个方法主要是在内部创建了一个 ProxyFactory 的实例，然后 set 了一大堆内容，剩下的工作就都是这个 ProxyFactory 实例的了，通过这个实例来创建代理: <code>getProxy(classLoader)</code>。</p><h2 id="proxyfactory-详解" tabindex="-1">ProxyFactory 详解 <a class="header-anchor" href="#proxyfactory-详解" aria-label="Permalink to &quot;ProxyFactory 详解&quot;">​</a></h2><p>根据上面的源码，我们走到了 ProxyFactory 这个类了，我们到这个类来一看究竟。</p><p>顺着上面的路子，我们首先到 ProxyFactory#getProxy(classLoader) 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createAopProxy</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(classLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createAopProxy</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(classLoader);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法首先通过 createAopProxy() 创建一个 AopProxy 的实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> AopProxy </span><span style="color:#B392F0;">createAopProxy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.active) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">activate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAopProxyFactory</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">createAopProxy</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> AopProxy </span><span style="color:#6F42C1;">createAopProxy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.active) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">activate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAopProxyFactory</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">createAopProxy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>创建 AopProxy 之前，我们需要一个 AopProxyFactory 实例，然后看 ProxyCreatorSupport 的构造方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProxyCreatorSupport</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.aopProxyFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultAopProxyFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProxyCreatorSupport</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.aopProxyFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultAopProxyFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样就将我们导到 <code>DefaultAopProxyFactory</code> 这个类了，我们看它的 createAopProxy(…) 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultAopProxyFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AopProxyFactory</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> AopProxy </span><span style="color:#B392F0;">createAopProxy</span><span style="color:#E1E4E8;">(AdvisedSupport </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> AopConfigException {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// (我也没用过这个optimize，默认false) || (proxy-target-class=true) || (没有接口)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (config.</span><span style="color:#B392F0;">isOptimize</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">isProxyTargetClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNoUserSuppliedProxyInterfaces</span><span style="color:#E1E4E8;">(config)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; targetClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getTargetClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (targetClass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AopConfigException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TargetSource cannot determine target class: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">&quot;Either an interface or a target is required for proxy creation.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 如果要代理的类本身就是接口，也会用 JDK 动态代理</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 我也没用过这个。。。</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (targetClass.</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> Proxy.</span><span style="color:#B392F0;">isProxyClass</span><span style="color:#E1E4E8;">(targetClass)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdkDynamicAopProxy</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjenesisCglibAopProxy</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 如果有接口，会跑到这个分支</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdkDynamicAopProxy</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 判断是否有实现自定义的接口</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNoUserSuppliedProxyInterfaces</span><span style="color:#E1E4E8;">(AdvisedSupport </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] ifcs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getProxiedInterfaces</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (ifcs.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (ifcs.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> SpringProxy.class.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(ifcs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultAopProxyFactory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AopProxyFactory</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AopProxy </span><span style="color:#6F42C1;">createAopProxy</span><span style="color:#24292E;">(AdvisedSupport </span><span style="color:#E36209;">config</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> AopConfigException {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// (我也没用过这个optimize，默认false) || (proxy-target-class=true) || (没有接口)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (config.</span><span style="color:#6F42C1;">isOptimize</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">isProxyTargetClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNoUserSuppliedProxyInterfaces</span><span style="color:#24292E;">(config)) {</span></span>
<span class="line"><span style="color:#24292E;">         Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; targetClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getTargetClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (targetClass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AopConfigException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TargetSource cannot determine target class: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&quot;Either an interface or a target is required for proxy creation.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 如果要代理的类本身就是接口，也会用 JDK 动态代理</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 我也没用过这个。。。</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (targetClass.</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> Proxy.</span><span style="color:#6F42C1;">isProxyClass</span><span style="color:#24292E;">(targetClass)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdkDynamicAopProxy</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjenesisCglibAopProxy</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 如果有接口，会跑到这个分支</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdkDynamicAopProxy</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 判断是否有实现自定义的接口</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNoUserSuppliedProxyInterfaces</span><span style="color:#24292E;">(AdvisedSupport </span><span style="color:#E36209;">config</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] ifcs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getProxiedInterfaces</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (ifcs.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (ifcs.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> SpringProxy.class.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(ifcs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，我们知道 createAopProxy 方法有可能返回 JdkDynamicAopProxy 实例，也有可能返回 ObjenesisCglibAopProxy 实例，这里总结一下：</p><p>如果被代理的目标类实现了一个或多个自定义的接口，那么就会使用 JDK 动态代理，如果没有实现任何接口，会使用 CGLIB 实现代理，如果设置了 proxy-target-class=&quot;true&quot;，那么都会使用 CGLIB。</p><p>JDK 动态代理基于接口，所以只有接口中的方法会被增强，而 CGLIB 基于类继承，需要注意就是如果方法使用了 final 修饰，或者是 private 方法，是不能被增强的。</p><p>有了 AopProxy 实例以后，我们就回到这个方法了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createAopProxy</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(classLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createAopProxy</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(classLoader);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们分别来看下两个 AopProxy 实现类的 getProxy(classLoader) 实现。</p><p>JdkDynamicAopProxy 类的源码比较简单，总共两百多行，</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isDebugEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Creating JDK dynamic proxy: target source is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised.</span><span style="color:#B392F0;">getTargetSource</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] proxiedInterfaces </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AopProxyUtils.</span><span style="color:#B392F0;">completeProxiedInterfaces</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">findDefinedEqualsAndHashCodeMethods</span><span style="color:#E1E4E8;">(proxiedInterfaces);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Proxy.</span><span style="color:#B392F0;">newProxyInstance</span><span style="color:#E1E4E8;">(classLoader, proxiedInterfaces, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isDebugEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Creating JDK dynamic proxy: target source is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised.</span><span style="color:#6F42C1;">getTargetSource</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] proxiedInterfaces </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AopProxyUtils.</span><span style="color:#6F42C1;">completeProxiedInterfaces</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">findDefinedEqualsAndHashCodeMethods</span><span style="color:#24292E;">(proxiedInterfaces);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Proxy.</span><span style="color:#6F42C1;">newProxyInstance</span><span style="color:#24292E;">(classLoader, proxiedInterfaces, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>java.lang.reflect.Proxy.newProxyInstance(…) 方法需要三个参数，第一个是 ClassLoader，第二个参数代表需要实现哪些接口，第三个参数最重要，是 InvocationHandler 实例，我们看到这里传了 this，因为 JdkDynamicAopProxy 本身实现了 InvocationHandler 接口。</p><p>InvocationHandler 只有一个方法，当生成的代理类对外提供服务的时候，都会导到这个方法中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvocationHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;">, Method </span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvocationHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">proxy</span><span style="color:#24292E;">, Method </span><span style="color:#E36209;">method</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面来看看 JdkDynamicAopProxy 对其的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object proxy, Method method, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">   MethodInvocation invocation;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object oldProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> setProxyContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   TargetSource targetSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised.targetSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; targetClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.equalsDefined </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> AopUtils.</span><span style="color:#B392F0;">isEqualsMethod</span><span style="color:#E1E4E8;">(method)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// The target does not implement the equals(Object) method itself.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 代理的 equals 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hashCodeDefined </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> AopUtils.</span><span style="color:#B392F0;">isHashCodeMethod</span><span style="color:#E1E4E8;">(method)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// The target does not implement the hashCode() method itself.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 代理的 hashCode 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> DecoratingProxy.class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> AopProxyUtils.</span><span style="color:#B392F0;">ultimateTargetClass</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised.opaque </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">            method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(Advised.class)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Service invocations on ProxyConfig with the proxy config...</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> AopUtils.</span><span style="color:#B392F0;">invokeJoinpointUsingReflection</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised, method, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      Object retVal;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果设置了 exposeProxy，那么将 proxy 放到 ThreadLocal 中</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised.exposeProxy) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Make invocation available if necessary.</span></span>
<span class="line"><span style="color:#E1E4E8;">         oldProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AopContext.</span><span style="color:#B392F0;">setCurrentProxy</span><span style="color:#E1E4E8;">(proxy);</span></span>
<span class="line"><span style="color:#E1E4E8;">         setProxyContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// May be null. Get as late as possible to minimize the time we &quot;own&quot; the target,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// in case it comes from a pool.</span></span>
<span class="line"><span style="color:#E1E4E8;">      target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> targetSource.</span><span style="color:#B392F0;">getTarget</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         targetClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Get the interception chain for this method.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建一个 chain，包含所有要执行的 advice</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; chain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised.</span><span style="color:#B392F0;">getInterceptorsAndDynamicInterceptionAdvice</span><span style="color:#E1E4E8;">(method, targetClass);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Check whether we have any advice. If we don&#39;t, we can fallback on direct</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chain.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// We can skip creating a MethodInvocation: just invoke the target directly</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// chain 是空的，说明不需要被增强，这种情况很简单</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] argsToUse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AopProxyUtils.</span><span style="color:#B392F0;">adaptArgumentsIfNecessary</span><span style="color:#E1E4E8;">(method, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">         retVal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AopUtils.</span><span style="color:#B392F0;">invokeJoinpointUsingReflection</span><span style="color:#E1E4E8;">(target, method, argsToUse);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// We need to create a method invocation...</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 执行方法，得到返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">         invocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReflectiveMethodInvocation</span><span style="color:#E1E4E8;">(proxy, target, method, args, targetClass, chain);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Proceed to the joinpoint through the interceptor chain.</span></span>
<span class="line"><span style="color:#E1E4E8;">         retVal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Massage return value if necessary.</span></span>
<span class="line"><span style="color:#E1E4E8;">      Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; returnType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (retVal </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> retVal </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">            returnType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> Object.class </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> returnType.</span><span style="color:#B392F0;">isInstance</span><span style="color:#E1E4E8;">(proxy) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">RawTargetAccess.class.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Special case: it returned &quot;this&quot; and the return type of the method</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// is type-compatible. Note that we can&#39;t help if the target sets</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// a reference to itself in another returned object.</span></span>
<span class="line"><span style="color:#E1E4E8;">         retVal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (retVal </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> returnType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> Void.TYPE </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> returnType.</span><span style="color:#B392F0;">isPrimitive</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AopInvocationException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">&quot;Null return value from advice does not match primitive return type for: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> method);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> retVal;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">targetSource.</span><span style="color:#B392F0;">isStatic</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Must have come from TargetSource.</span></span>
<span class="line"><span style="color:#E1E4E8;">         targetSource.</span><span style="color:#B392F0;">releaseTarget</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (setProxyContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Restore old proxy.</span></span>
<span class="line"><span style="color:#E1E4E8;">         AopContext.</span><span style="color:#B392F0;">setCurrentProxy</span><span style="color:#E1E4E8;">(oldProxy);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object proxy, Method method, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">   MethodInvocation invocation;</span></span>
<span class="line"><span style="color:#24292E;">   Object oldProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> setProxyContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   TargetSource targetSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised.targetSource;</span></span>
<span class="line"><span style="color:#24292E;">   Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; targetClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   Object target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.equalsDefined </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> AopUtils.</span><span style="color:#6F42C1;">isEqualsMethod</span><span style="color:#24292E;">(method)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// The target does not implement the equals(Object) method itself.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 代理的 equals 方法</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hashCodeDefined </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> AopUtils.</span><span style="color:#6F42C1;">isHashCodeMethod</span><span style="color:#24292E;">(method)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// The target does not implement the hashCode() method itself.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 代理的 hashCode 方法</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> DecoratingProxy.class) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> AopProxyUtils.</span><span style="color:#6F42C1;">ultimateTargetClass</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised.opaque </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(Advised.class)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Service invocations on ProxyConfig with the proxy config...</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> AopUtils.</span><span style="color:#6F42C1;">invokeJoinpointUsingReflection</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised, method, args);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      Object retVal;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果设置了 exposeProxy，那么将 proxy 放到 ThreadLocal 中</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised.exposeProxy) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Make invocation available if necessary.</span></span>
<span class="line"><span style="color:#24292E;">         oldProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AopContext.</span><span style="color:#6F42C1;">setCurrentProxy</span><span style="color:#24292E;">(proxy);</span></span>
<span class="line"><span style="color:#24292E;">         setProxyContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// May be null. Get as late as possible to minimize the time we &quot;own&quot; the target,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// in case it comes from a pool.</span></span>
<span class="line"><span style="color:#24292E;">      target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> targetSource.</span><span style="color:#6F42C1;">getTarget</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         targetClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Get the interception chain for this method.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 创建一个 chain，包含所有要执行的 advice</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; chain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised.</span><span style="color:#6F42C1;">getInterceptorsAndDynamicInterceptionAdvice</span><span style="color:#24292E;">(method, targetClass);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Check whether we have any advice. If we don&#39;t, we can fallback on direct</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (chain.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// We can skip creating a MethodInvocation: just invoke the target directly</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// chain 是空的，说明不需要被增强，这种情况很简单</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] argsToUse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AopProxyUtils.</span><span style="color:#6F42C1;">adaptArgumentsIfNecessary</span><span style="color:#24292E;">(method, args);</span></span>
<span class="line"><span style="color:#24292E;">         retVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AopUtils.</span><span style="color:#6F42C1;">invokeJoinpointUsingReflection</span><span style="color:#24292E;">(target, method, argsToUse);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// We need to create a method invocation...</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 执行方法，得到返回值</span></span>
<span class="line"><span style="color:#24292E;">         invocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectiveMethodInvocation</span><span style="color:#24292E;">(proxy, target, method, args, targetClass, chain);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Proceed to the joinpoint through the interceptor chain.</span></span>
<span class="line"><span style="color:#24292E;">         retVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Massage return value if necessary.</span></span>
<span class="line"><span style="color:#24292E;">      Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; returnType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (retVal </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> retVal </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            returnType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> Object.class </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> returnType.</span><span style="color:#6F42C1;">isInstance</span><span style="color:#24292E;">(proxy) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">RawTargetAccess.class.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Special case: it returned &quot;this&quot; and the return type of the method</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// is type-compatible. Note that we can&#39;t help if the target sets</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// a reference to itself in another returned object.</span></span>
<span class="line"><span style="color:#24292E;">         retVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proxy;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (retVal </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> returnType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> Void.TYPE </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> returnType.</span><span style="color:#6F42C1;">isPrimitive</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AopInvocationException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#032F62;">&quot;Null return value from advice does not match primitive return type for: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> method);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> retVal;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">targetSource.</span><span style="color:#6F42C1;">isStatic</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Must have come from TargetSource.</span></span>
<span class="line"><span style="color:#24292E;">         targetSource.</span><span style="color:#6F42C1;">releaseTarget</span><span style="color:#24292E;">(target);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (setProxyContext) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Restore old proxy.</span></span>
<span class="line"><span style="color:#24292E;">         AopContext.</span><span style="color:#6F42C1;">setCurrentProxy</span><span style="color:#24292E;">(oldProxy);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>上面就三言两语说了一下，感兴趣的读者自己去深入探索下，不是很难。简单地说，就是在执行每个方法的时候，判断下该方法是否需要被一次或多次增强（执行一个或多个 advice）。</p></blockquote><p>说完了 JDK 动态代理 JdkDynamicAopProxy#getProxy(classLoader)，我们再来瞄一眼 CGLIB 的代理实现 ObjenesisCglibAopProxy#getProxy(classLoader)。</p><p>ObjenesisCglibAopProxy 继承了 CglibAopProxy，而 CglibAopProxy 继承了 AopProxy。</p><blockquote><p>ObjenesisCglibAopProxy 使用了 Objenesis 这个库，和 cglib 一样，我们不需要在 maven 中进行依赖，因为 spring-core.jar 直接把它的源代码也搞过来了。</p><p><img src="https://www.javadoop.com/blogimages/spring-aop-source/3.png" alt="3"></p></blockquote><p>通过 CGLIB 生成代理的代码量有点大，我们就不进行深入分析了，我们看下大体的骨架。它的 getProxy(classLoader) 方法在父类 CglibAopProxy 类中：</p><p>// CglibAopProxy#getProxy(classLoader)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getProxy</span><span style="color:#E1E4E8;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Configure CGLIB Enhancer...</span></span>
<span class="line"><span style="color:#E1E4E8;">      Enhancer enhancer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createEnhancer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (classLoader </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         enhancer.</span><span style="color:#B392F0;">setClassLoader</span><span style="color:#E1E4E8;">(classLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (classLoader </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SmartClassLoader </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">               ((SmartClassLoader) classLoader).</span><span style="color:#B392F0;">isClassReloadable</span><span style="color:#E1E4E8;">(proxySuperClass)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            enhancer.</span><span style="color:#B392F0;">setUseCache</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      enhancer.</span><span style="color:#B392F0;">setSuperclass</span><span style="color:#E1E4E8;">(proxySuperClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">      enhancer.</span><span style="color:#B392F0;">setInterfaces</span><span style="color:#E1E4E8;">(AopProxyUtils.</span><span style="color:#B392F0;">completeProxiedInterfaces</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised));</span></span>
<span class="line"><span style="color:#E1E4E8;">      enhancer.</span><span style="color:#B392F0;">setNamingPolicy</span><span style="color:#E1E4E8;">(SpringNamingPolicy.INSTANCE);</span></span>
<span class="line"><span style="color:#E1E4E8;">      enhancer.</span><span style="color:#B392F0;">setStrategy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassLoaderAwareUndeclaredThrowableStrategy</span><span style="color:#E1E4E8;">(classLoader));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">Callback</span><span style="color:#E1E4E8;">[] callbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCallbacks</span><span style="color:#E1E4E8;">(rootClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">      Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] types </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[callbacks.length];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; x </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> types.length; x</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         types[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callbacks[x].</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span></span>
<span class="line"><span style="color:#E1E4E8;">      enhancer.</span><span style="color:#B392F0;">setCallbackFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProxyCallbackFilter</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.advised.</span><span style="color:#B392F0;">getConfigurationOnlyCopy</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fixedInterceptorMap, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fixedInterceptorOffset));</span></span>
<span class="line"><span style="color:#E1E4E8;">      enhancer.</span><span style="color:#B392F0;">setCallbackTypes</span><span style="color:#E1E4E8;">(types);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Generate the proxy class and create a proxy instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProxyClassAndInstance</span><span style="color:#E1E4E8;">(enhancer, callbacks);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (CodeGenerationException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IllegalArgumentException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getProxy</span><span style="color:#24292E;">(ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#24292E;">	  ...</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Configure CGLIB Enhancer...</span></span>
<span class="line"><span style="color:#24292E;">      Enhancer enhancer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createEnhancer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (classLoader </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         enhancer.</span><span style="color:#6F42C1;">setClassLoader</span><span style="color:#24292E;">(classLoader);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (classLoader </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SmartClassLoader </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">               ((SmartClassLoader) classLoader).</span><span style="color:#6F42C1;">isClassReloadable</span><span style="color:#24292E;">(proxySuperClass)) {</span></span>
<span class="line"><span style="color:#24292E;">            enhancer.</span><span style="color:#6F42C1;">setUseCache</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      enhancer.</span><span style="color:#6F42C1;">setSuperclass</span><span style="color:#24292E;">(proxySuperClass);</span></span>
<span class="line"><span style="color:#24292E;">      enhancer.</span><span style="color:#6F42C1;">setInterfaces</span><span style="color:#24292E;">(AopProxyUtils.</span><span style="color:#6F42C1;">completeProxiedInterfaces</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised));</span></span>
<span class="line"><span style="color:#24292E;">      enhancer.</span><span style="color:#6F42C1;">setNamingPolicy</span><span style="color:#24292E;">(SpringNamingPolicy.INSTANCE);</span></span>
<span class="line"><span style="color:#24292E;">      enhancer.</span><span style="color:#6F42C1;">setStrategy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassLoaderAwareUndeclaredThrowableStrategy</span><span style="color:#24292E;">(classLoader));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">Callback</span><span style="color:#24292E;">[] callbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCallbacks</span><span style="color:#24292E;">(rootClass);</span></span>
<span class="line"><span style="color:#24292E;">      Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] types </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[callbacks.length];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> types.length; x</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         types[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callbacks[x].</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span></span>
<span class="line"><span style="color:#24292E;">      enhancer.</span><span style="color:#6F42C1;">setCallbackFilter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProxyCallbackFilter</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.advised.</span><span style="color:#6F42C1;">getConfigurationOnlyCopy</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fixedInterceptorMap, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fixedInterceptorOffset));</span></span>
<span class="line"><span style="color:#24292E;">      enhancer.</span><span style="color:#6F42C1;">setCallbackTypes</span><span style="color:#24292E;">(types);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Generate the proxy class and create a proxy instance.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProxyClassAndInstance</span><span style="color:#24292E;">(enhancer, callbacks);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (CodeGenerationException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      ...</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IllegalArgumentException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      ...</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      ...</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>CGLIB 生成代理的核心类是 Enhancer 类，这里就不展开说了。</p><h2 id="基于注解的-spring-aop-源码分析" tabindex="-1">基于注解的 Spring AOP 源码分析 <a class="header-anchor" href="#基于注解的-spring-aop-源码分析" aria-label="Permalink to &quot;基于注解的 Spring AOP 源码分析&quot;">​</a></h2><p>上面我们走马观花地介绍了使用 DefaultAdvisorAutoProxyCreator 来实现 Spring AOP 的源码，这里，我们也同样走马观花地来看下 @AspectJ 的实现原理。</p><p>我们之前说过，开启 @AspectJ 的两种方式，一个是 <code>&lt;aop:aspectj-autoproxy/&gt;</code>，一个是 <code>@EnableAspectJAutoProxy</code>，它们的原理是一样的，都是通过注册一个 bean 来实现的。</p><p>解析 <code>&lt;aop:aspectj-autoproxy/&gt;</code> 需要用到 AopNamespaceHandler：</p><p><img src="https://www.javadoop.com/blogimages/spring-aop-source/4.png" alt="4"></p><p>然后到类 AspectJAutoProxyBeanDefinitionParser：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AspectJAutoProxyBeanDefinitionParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanDefinitionParser</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> BeanDefinition </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(Element </span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, ParserContext </span><span style="color:#FFAB70;">parserContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      AopNamespaceUtils.</span><span style="color:#B392F0;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#E1E4E8;">(parserContext, element);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">extendBeanDefinition</span><span style="color:#E1E4E8;">(element, parserContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AspectJAutoProxyBeanDefinitionParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanDefinitionParser</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> BeanDefinition </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(Element </span><span style="color:#E36209;">element</span><span style="color:#24292E;">, ParserContext </span><span style="color:#E36209;">parserContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      AopNamespaceUtils.</span><span style="color:#6F42C1;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#24292E;">(parserContext, element);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">extendBeanDefinition</span><span style="color:#24292E;">(element, parserContext);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>进去 registerAspectJAnnotationAutoProxyCreatorIfNecessary(...) 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      ParserContext parserContext, Element sourceElement) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   BeanDefinition beanDefinition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AopConfigUtils.</span><span style="color:#B392F0;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">         parserContext.</span><span style="color:#B392F0;">getRegistry</span><span style="color:#E1E4E8;">(), parserContext.</span><span style="color:#B392F0;">extractSource</span><span style="color:#E1E4E8;">(sourceElement));</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">useClassProxyingIfNecessary</span><span style="color:#E1E4E8;">(parserContext.</span><span style="color:#B392F0;">getRegistry</span><span style="color:#E1E4E8;">(), sourceElement);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">registerComponentIfNecessary</span><span style="color:#E1E4E8;">(beanDefinition, parserContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      ParserContext parserContext, Element sourceElement) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   BeanDefinition beanDefinition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AopConfigUtils.</span><span style="color:#6F42C1;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">         parserContext.</span><span style="color:#6F42C1;">getRegistry</span><span style="color:#24292E;">(), parserContext.</span><span style="color:#6F42C1;">extractSource</span><span style="color:#24292E;">(sourceElement));</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">useClassProxyingIfNecessary</span><span style="color:#24292E;">(parserContext.</span><span style="color:#6F42C1;">getRegistry</span><span style="color:#24292E;">(), sourceElement);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">registerComponentIfNecessary</span><span style="color:#24292E;">(beanDefinition, parserContext);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再进去 AopConfigUtils#registerAspectJAnnotationAutoProxyCreatorIfNecessary(...)：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> BeanDefinition </span><span style="color:#B392F0;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#E1E4E8;">(BeanDefinitionRegistry registry,</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Object source) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerOrEscalateApcAsRequired</span><span style="color:#E1E4E8;">(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> BeanDefinition </span><span style="color:#6F42C1;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="color:#24292E;">(BeanDefinitionRegistry registry,</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Object source) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerOrEscalateApcAsRequired</span><span style="color:#24292E;">(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最终我们看到，Spring 注册了一个 AnnotationAwareAspectJAutoProxyCreator 的 bean，beanName 为：&quot;org.springframework.aop.config.internalAutoProxyCreator&quot;。</p><p>我们看下 AnnotationAwareAspectJAutoProxyCreator 的继承结构：</p><p><img src="https://www.javadoop.com/blogimages/spring-aop-source/5.png" alt="5"></p><p>和前面介绍的 DefaultAdvisorAutoProxyCreator 一样，它也是一个 BeanPostProcessor，剩下的我们就不说了，它和它的父类 AspectJAwareAdvisorAutoProxyCreator 都不复杂。</p><h2 id="闲聊-instantiationawarebeanpostprocessor" tabindex="-1">闲聊 InstantiationAwareBeanPostProcessor <a class="header-anchor" href="#闲聊-instantiationawarebeanpostprocessor" aria-label="Permalink to &quot;闲聊 InstantiationAwareBeanPostProcessor&quot;">​</a></h2><p>为什么要说这个呢？因为我发现，很多人都以为 Spring AOP 是通过这个接口来作用于 bean 生成代理的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstantiationAwareBeanPostProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanPostProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   Object </span><span style="color:#B392F0;">postProcessBeforeInstantiation</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">beanClass</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postProcessAfterInstantiation</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   PropertyValues </span><span style="color:#B392F0;">postProcessPropertyValues</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">         PropertyValues </span><span style="color:#FFAB70;">pvs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">PropertyDescriptor</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">pds</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstantiationAwareBeanPostProcessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanPostProcessor</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   Object </span><span style="color:#6F42C1;">postProcessBeforeInstantiation</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">beanClass</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">beanName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postProcessAfterInstantiation</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">bean</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">beanName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   PropertyValues </span><span style="color:#6F42C1;">postProcessPropertyValues</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">         PropertyValues </span><span style="color:#E36209;">pvs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">PropertyDescriptor</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">pds</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">bean</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">beanName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它和 BeanPostProcessor 的方法非常相似，而且它还继承了 BeanPostProcessor。</p><p>不仔细看还真的不好区分，下面是 BeanPostProcessor 中的两个方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object </span><span style="color:#B392F0;">postProcessBeforeInitialization</span><span style="color:#E1E4E8;">(Object bean, String beanName) throws BeansException;</span></span>
<span class="line"><span style="color:#E1E4E8;">Object </span><span style="color:#B392F0;">postProcessAfterInitialization</span><span style="color:#E1E4E8;">(Object bean, String beanName) throws BeansException;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object </span><span style="color:#6F42C1;">postProcessBeforeInitialization</span><span style="color:#24292E;">(Object bean, String beanName) throws BeansException;</span></span>
<span class="line"><span style="color:#24292E;">Object </span><span style="color:#6F42C1;">postProcessAfterInitialization</span><span style="color:#24292E;">(Object bean, String beanName) throws BeansException;</span></span></code></pre></div><p>发现没有，InstantiationAwareBeanPostProcessor 是 <code>Instantiation</code>，BeanPostProcessor 是 <code>Initialization</code>，它代表的是 bean 在实例化完成并且属性注入完成，在执行 init-method 的前后进行作用的。</p><p>而 InstantiationAwareBeanPostProcessor 的执行时机要前面一些，大家需要翻下 IOC 的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory 447行</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(String beanName, RootBeanDefinition mbd, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) throws BeanCreationException {</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理</span></span>
<span class="line"><span style="color:#E1E4E8;">      Object bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveBeforeInstantiation</span><span style="color:#E1E4E8;">(beanName, mbdToUse);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean; </span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// BeanPostProcessor 是在这里面实例化后才能得到执行</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object beanInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doCreateBean</span><span style="color:#E1E4E8;">(beanName, mbdToUse, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">   ...</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> beanInstance;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AbstractAutowireCapableBeanFactory 447行</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(String beanName, RootBeanDefinition mbd, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws BeanCreationException {</span></span>
<span class="line"><span style="color:#24292E;">   ...</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理</span></span>
<span class="line"><span style="color:#24292E;">      Object bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveBeforeInstantiation</span><span style="color:#24292E;">(beanName, mbdToUse);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bean </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean; </span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// BeanPostProcessor 是在这里面实例化后才能得到执行</span></span>
<span class="line"><span style="color:#24292E;">   Object beanInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doCreateBean</span><span style="color:#24292E;">(beanName, mbdToUse, args);</span></span>
<span class="line"><span style="color:#24292E;">   ...</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> beanInstance;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>点进去看 resolveBeforeInstantiation(beanName, mbdToUse) 方法，然后就会导到 InstantiationAwareBeanPostProcessor 的 postProcessBeforeInstantiation 方法，对于我们分析的 AOP 来说，该方法的实现在 AbstractAutoProxyCreator 类中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">postProcessBeforeInstantiation</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> beanClass, String beanName) throws BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (beanName </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      TargetSource targetSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCustomTargetSource</span><span style="color:#E1E4E8;">(beanClass, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (targetSource </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.targetSourcedBeans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] specificInterceptors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAdvicesAndAdvisorsForBean</span><span style="color:#E1E4E8;">(beanClass, beanName, targetSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">         Object proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProxy</span><span style="color:#E1E4E8;">(beanClass, beanName, specificInterceptors, targetSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.proxyTypes.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(cacheKey, proxy.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">postProcessBeforeInstantiation</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> beanClass, String beanName) throws BeansException {</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (beanName </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      TargetSource targetSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCustomTargetSource</span><span style="color:#24292E;">(beanClass, beanName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (targetSource </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.targetSourcedBeans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] specificInterceptors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAdvicesAndAdvisorsForBean</span><span style="color:#24292E;">(beanClass, beanName, targetSource);</span></span>
<span class="line"><span style="color:#24292E;">         Object proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProxy</span><span style="color:#24292E;">(beanClass, beanName, specificInterceptors, targetSource);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.proxyTypes.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cacheKey, proxy.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxy;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以看到，这里也有创建代理的逻辑，以至于很多人会搞错。确实，这里是有可能创建代理的，但前提是对于相应的 bean 我们有自定义的 TargetSource 实现，进到 getCustomTargetSource(...) 方法就清楚了，我们需要配置一个 customTargetSourceCreators，它是一个 TargetSourceCreator 数组。</p><p>这里就不再展开说 TargetSource 了，请参考 Spring Reference 中的 <a href="https://docs.spring.io/spring/docs/4.3.11.RELEASE/spring-framework-reference/htmlsingle/#aop-targetsource" target="_blank" rel="noreferrer">Using TargetSources</a>。</p>`,113),e=[o];function t(r,c,E,y,i,F){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{A as __pageData,u as default};
