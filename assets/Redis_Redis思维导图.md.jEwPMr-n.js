import{_ as l,o as i,c as e,R as a}from"./chunks/framework.7FlijoJG.js";const m=JSON.parse('{"title":"Redis思维导图","description":"","frontmatter":{"title":"Redis思维导图","date":"2024-01-10T10:04:45.000Z","tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false,"mindmap-plugin":"basic"},"headers":[],"relativePath":"Redis/Redis思维导图.md","filePath":"Redis/Redis思维导图.md","lastUpdated":1711296414000}'),t={name:"Redis/Redis思维导图.md"},s=a('<h1 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h1><h2 id="比磁盘快的原因" tabindex="-1">比磁盘快的原因 <a class="header-anchor" href="#比磁盘快的原因" aria-label="Permalink to &quot;比磁盘快的原因&quot;">​</a></h2><ul><li>Redis 基于内存，使用电脉冲的方式</li><li>其他如 MySQL、hbase 等需要磁盘寻址，从内存再到 CPU，耗时较长</li></ul><h2 id="数据类型-数据结构-时间复杂度" tabindex="-1">数据类型/数据结构/时间复杂度 <a class="header-anchor" href="#数据类型-数据结构-时间复杂度" aria-label="Permalink to &quot;数据类型/数据结构/时间复杂度&quot;">​</a></h2><ul><li>string O(1) <ul><li>string（3） <ul><li>int</li><li>embstr</li><li>raw</li></ul></li></ul></li><li>list O(n) <ul><li>zipList</li><li>linkedList</li></ul></li><li>hash O(1) <ul><li>zipList</li><li>hashtable</li></ul></li><li>sort set O(logN) <ul><li>zipList</li><li>skipList</li></ul></li><li>set O(1) <ul><li>hashtable</li><li>intset</li></ul></li><li>多种数据结构的原因 <ul><li>使用更为紧凑的结构去节省空间，同时查询速度不低</li></ul></li><li>新节点</li></ul><h2 id="全局哈希表" tabindex="-1">全局哈希表 <a class="header-anchor" href="#全局哈希表" aria-label="Permalink to &quot;全局哈希表&quot;">​</a></h2><ul><li>结构 <ul><li>表+桶</li></ul></li><li>流程 <ul><li>先根据 hash 函数进行取模，获取表的位置</li></ul></li><li>时间复杂度 <ul><li>O(1)</li></ul></li><li>哈希冲突 <ul><li>解决办法 <ul><li>拉链法 <ul><li>当发生哈希冲突就引申出一条链表，放在链表上面，时间复杂度 O(n)</li></ul></li><li>rehash <ul><li>表2进行扩容， 表 1迁移数据到表 2，表 2 迁移结束则下线表 1</li><li>渐进式 rehash <ul><li>原因 <ul><li>一次性迁移数据会导致阻塞</li></ul></li><li>解决方法 <ul><li>一个业务操作顺便迁移一个桶</li><li>两个表同时接收增删改的操作</li><li>直到表 1 所有数据都迁移完成</li><li>下线表 1，设置表 2 为 current</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>',7),u=[s];function r(d,n,o,h,_,c){return i(),e("div",null,u)}const f=l(t,[["render",r]]);export{m as __pageData,f as default};
