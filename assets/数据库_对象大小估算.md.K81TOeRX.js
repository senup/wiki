import{_ as s,o as a,c as n,R as p}from"./chunks/framework.7FlijoJG.js";const b=JSON.parse('{"title":"对象大小估算","description":"","frontmatter":{"title":"对象大小估算","date":"2023-12-24T11:06:37.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"数据库/对象大小估算.md","filePath":"数据库/对象大小估算.md","lastUpdated":1711296414000}'),l={name:"数据库/对象大小估算.md"},e=p(`<p>我们首先来写一个简单的 Java 类吧：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> c;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> c;</span></span>
<span class="line"><span style="color:#24292E;">    Object obj;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个类中，我们有一个 int 字段，一个 double 字段，一个 boolean 字段以及一 个 Object 引用字段。那我们来计算它的内存占用吧：</p><p>在 64 位 JVM 中（没有开启压缩指针），对象头通常占用 12 个字节。这就像是我们的起跑线一样，无论如何都需要的基础空间。</p><p>然后考虑到实例数据部分，跟奔跑中的飞毛腿一样，各个字段各展鸿图。我们的 int 字段需要 4 个字节，double 字段需要 8 个字节，boolean 字段需要 1 个字节，而一个 Object 引用字段（默认情况下）需要 8 个字节。各个字段加起来共就是 21 个字节。</p><p>最后，不要忘了，为了满足内存对齐的要求，可能还需要进一步的对齐填充。你知道，健将飞毛腿跑得再快，也不能抛开规则。在这里，假设我们只需要额外的 3 个字节就可以对齐了。</p><p>所以，我们这个 MyObject 对象一共就需要 12 个字节（对象头） + 21 个字节（字段） + 3 个字节（对齐填充）= 36 个字节 。</p><p>就这样，就像我们在赛场上奔跑一样，我们成功地计算出了这个 Java 类对象大约会占用多大的内存空间啦！不过，请注意这只是一个估算，具体的内存使用还是需要用专门的工具去看，或者基于你 JVM 的实际设置会有所改变。</p>`,8),o=[e];function t(c,r,i,E,y,d){return a(),n("div",null,o)}const u=s(l,[["render",t]]);export{b as __pageData,u as default};
