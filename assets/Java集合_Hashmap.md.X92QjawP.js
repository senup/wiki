import{_ as a,o as s,c as t,R as e}from"./chunks/framework.7FlijoJG.js";const g=JSON.parse('{"title":"Hashmap","description":"","frontmatter":{"title":"Hashmap","date":"2023-12-25T16:30:40.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"Java集合/Hashmap.md","filePath":"Java集合/Hashmap.md","lastUpdated":1711296414000}'),r={name:"Java集合/Hashmap.md"},o=e('<h2 id="使用规则" tabindex="-1">使用规则 <a class="header-anchor" href="#使用规则" aria-label="Permalink to &quot;使用规则&quot;">​</a></h2><ul><li><strong>初始化容量</strong>：当我们预估到 HashMap 的容量时，一定要在初始化时设置其容量。例如，我们知道将有 1000 个元素，那么初始化时可以设置其容量为 1024（最接近 1000 的 2 的幂次方），避免后期的扩容操作。</li><li><strong>负载因子</strong>：当 HashMap 的填充度达到负载因子（默认 0.75）时，就会进行扩容。我们可以根据实际需求调整这个负载因子，如果希望空间换时间，则增大负载因子；如果希望时间换空间，则减小负载因子。</li><li><strong>避免使用链表</strong>：在 HashMap 中，当散列碰撞的元素数目过多，会导致链表过长，查询效率下降。我们通常应该尽量避免这种情况出现，确保 hash 函数的质量，使得元素分布均匀。</li><li><strong>并发环境</strong>：在多线程环境下，HashMap 是不安全的，我们要考虑使用 ConcurrentHashMap，或者使用 Collections.synchronizedMap(hashMap)来创建一个线程安全的 Map。</li><li><strong>Key 和 Value 设为 null</strong>：HashMap 允许 key 和 value 为空，但是我们最好避免这样做，因为这会增加解析 Map 的复杂性。</li><li><strong>遍历操作</strong>：遍历 key 时，使用 keySet ()方法；遍历 value 或者 entry 时，使用 entrySet ()方法，然后遍历 Entry，效率更高。</li></ul><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><strong>HashMap 底层实现</strong>：HashMap 是 Java 集合框架中的一种，它提供了哈希查找的功能。它的底层是一个数组结构，数组的每个元素又是一个链表。当新的元素被加入到 HashMap 中时，HashMap 会根据 hashcode 算法来决定其在数组中的位置，当这个位置上的元素数量超过 8 个时，链表会转为红黑树，以提高查找和插入的效率。其实，在 Java 8 及以后的版本中，为了优化性能，数据结构会在链表长度超过一定阈值（默认 8）时将链表转换为红黑树。</p><p><strong>负载因子</strong>：负载因子默认为 0.75，这是时间和空间效率的折中考虑。这个值表示当 HashMap 的 75%的容量被占用后就需要开始扩容。负载因子越大，越允许填满，填的越满有可能就越涉及到后续的 Hash 碰撞，稍微牺牲一些空间，能够提高查询效率。</p><p><strong>负载因子为 1 的情况</strong>：如果你将负载因子设为 1，那么意味着只有当 100%的容量被占用后才会进行扩容，这样会使得 HashMap 的填充度过高，增加查询时的 Hash 碰撞，可能导致 HashMap 的效率降低。所以，我们一般不会将负载因子设为 1。</p>',6),n=[o];function h(l,p,i,c,_,d){return s(),t("div",null,n)}const u=a(r,[["render",h]]);export{g as __pageData,u as default};
