import{_ as t,o as e,c as a,R as o}from"./chunks/framework.7FlijoJG.js";const A=JSON.parse('{"title":"分布式","description":"","frontmatter":{"title":"分布式","date":"2023-11-29T22:52:02.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"分布式系统/分布式.md","filePath":"分布式系统/分布式.md","lastUpdated":1711296414000}'),i={name:"分布式系统/分布式.md"},n=o('<h3 id="cap" tabindex="-1">CAP <a class="header-anchor" href="#cap" aria-label="Permalink to &quot;CAP&quot;">​</a></h3><p>CAP 理论是分布式系统设计中的一个基本原则，指出在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition Tolerance）这三个目标不可能同时满足。</p><ul><li><strong>一致性（Consistency）</strong>：所有节点在同一时间的数据是一致的。这意味着当一个节点对数据做出了修改后，所有其他节点都能立即看到这一变化。在一致性的要求下，系统无论在何时、何地访问，都能得到相同的数据。</li><li><strong>可用性（Availability）</strong>：系统能够保证对用户的每个请求都能够及时响应，即使出现节点故障或者网络分区等问题，系统也能继续提供服务。在可用性的要求下，系统对外能够提供持续的服务。</li><li><strong>分区容错性（Partition Tolerance）</strong>：系统能够容忍网络分区（网络故障或者延迟），即使在分布式系统中的节点之间发生通信故障或无法通信，系统仍能够正常工作。</li></ul><p>CAP 理论指出，在分布式系统中，由于分区容错性的要求，当出现网络分区时，系统只能同时满足一致性和可用性中的一个，无法同时保证两者。这是因为在网络分区的情况下，为了保持一致性，可能会导致无法对外提供服务；而为了保证可用性，可能会牺牲一致性。</p><p>在实际应用中，不同的分布式系统可能会基于业务需求权衡 CAP 原则，做出不同的取舍。例如，某些系统更注重一致性，而牺牲一部分可用性；而另一些系统可能更倾向于保证可用性，即使在特定条件下会牺牲一致性。</p><hr><p>提到 CAP 理论，我想到了一个笑话。有个小伙子向女朋友求婚，给了她三个条件：一起追剧、美食和出去玩，但是告诉她只能满足 2 个，这就是生活中的 CAP 理论。开个玩笑哈。</p><p>好，然后我们来认真说一说呢。CAP 理论是计算机科学中的一个重要理论。这个名字来自&quot;Consistency（一致性）&quot;、&quot;Availability（可用性）&quot;和&quot;Partition tolerance（分区容错性）&quot;三个英文单词的首字母，表示在分布式系统中，这三种特性无法同时满足，最多只能满足其中的两项。</p><p>一致性就像有个魔法复制器，不管你在哪里改变数据，其他地方的数据都会瞬间变化一样。</p><p>可用性则有些像小卖部的老板，无论何时你去找他，他都能对你微笑并提供服务，换句话说，这就是服务一直可用。</p><p>最后一个 P，分区容错性，犹如历经了地震、洪水仍然屹立不倒的建筑，当局部出现问题时，依然可以正常提供服务。</p><p>所以，如果一个系统想要同时具备这三个特性，那就像同时在大海中捞针，在刀尖上跳舞，做早饭的鸡蛋不碎，这在计算机科学中是不可能的。</p><p>所以在实际的系统设计中，基于业务需求和实际情况，我们需要在 CAP 中选择两个作为系统的主要特性，以提供高效、稳定的服务。</p>',13),s=[n];function r(l,p,c,_,d,u){return e(),a("div",null,s)}const C=t(i,[["render",r]]);export{A as __pageData,C as default};
