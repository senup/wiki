import{_ as s,o,c as a,k as t,a as e}from"./chunks/framework.7FlijoJG.js";const x=JSON.parse('{"title":"sso登录","description":"","frontmatter":{"title":"sso登录","date":"2024-01-16T13:50:14.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"安全/sso登录.md","filePath":"安全/sso登录.md","lastUpdated":1711296414000}'),n={name:"安全/sso登录.md"},i=t("h2",{id:"简单版",tabindex:"-1"},[e("简单版 "),t("a",{class:"header-anchor",href:"#简单版","aria-label":'Permalink to "简单版"'},"​")],-1),l=t("p",null,"使用了 Shiro 来做登录鉴权. 比如我们有好多种登录方式,比如微信扫码登录,账号密码登录,手机验证码登录这几种; 然后呢传到后端,后端就会获取Shiro 的一个 subject,拿到里面的用户名, 去 subject.login()进行判断用户名是否启用,是否在数据库里面,是否有角色权限 然后如果通过就开始设置 cookie 然后更新数据库的最新访问时间 大概是这样咯",-1),r=t("h2",{id:"什么是sso-与oauth2-0有什么关系",tabindex:"-1"},[e("什么是SSO？与OAuth2.0有什么关系 "),t("a",{class:"header-anchor",href:"#什么是sso-与oauth2-0有什么关系","aria-label":'Permalink to "什么是SSO？与OAuth2.0有什么关系"'},"​")],-1),h=t("p",null,"SSO（Single Sign-On）是一种身份验证和授权机制，它允许用户在一次登录后访问多个相关应用系统而无需再次输入凭证。SSO的目标是提供便捷的用户体验，减少用户的登录负担。",-1),c=t("p",null,"OAuth2.0是一种授权框架，它允许用户授权第三方应用访问其受保护的资源，而无需将用户名和密码直接提供给第三方应用。OAuth2.0的主要目标是授权和保护用户的资源，并确保用户可以控制对其资源的访问权限。",-1),d=t("p",null,"虽然SSO和[[OAuth]]2.0有相似的目标，都是为了提供用户便利和安全的身份验证和授权机制，但它们的实现和应用场景有所不同。SSO通常用于组织内部的应用系统，而OAuth2.0更多地用于第三方应用和开放平台之间的授权。虽然OAuth2.0也可以用于实现SSO，但通常需要一个独立的认证授权服务器来处理认证和授权请求链路，以验证用户的登录信息。",-1),_=t("p",null,"简而言之，SSO强调的是一次登录，多个应用系统使用；而OAuth2.0强调的是一次注册，多个应用系统授权访问。尽管OAuth2.0也可以用于实现SSO，但在实际应用中更常见的是将其用于第三方授权的场景。",-1),u=[i,l,r,h,c,d,_];function S(O,p,f,m,A,b){return o(),a("div",null,u)}const g=s(n,[["render",S]]);export{x as __pageData,g as default};
