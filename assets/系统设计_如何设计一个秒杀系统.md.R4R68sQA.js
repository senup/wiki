import{_ as t,o as s,c as o,R as r}from"./chunks/framework.7FlijoJG.js";const m=JSON.parse('{"title":"如何设计一个秒杀系统","description":"","frontmatter":{"title":"如何设计一个秒杀系统","date":"2023-12-25T15:57:15.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"系统设计/如何设计一个秒杀系统.md","filePath":"系统设计/如何设计一个秒杀系统.md","lastUpdated":1711296414000}'),n={name:"系统设计/如何设计一个秒杀系统.md"},e=r("<p>在设计秒杀系统时，我们首先要关注的是：系统要能够支持大并发、低延迟的访问，同时还要保证数据的一致性。基本上，优秀的秒杀系统都会涵盖下面的几个方面：</p><ol><li><strong>商品剩余数量预热</strong>：将商品的<strong>剩余数量</strong>预先加载到<strong>缓存</strong>（比如 Redis）中，这样在秒杀开始时，所有的请求都直接到达缓存服务器，而不用去访问数据库，可以极大的减轻数据库压力。</li><li><strong>请求的限流</strong>：使用各种限流技术（如令牌桶、漏桶算法等）来限制系统中的<strong>并发请求数量</strong>，过滤掉超出处理能力的请求。</li><li><strong>异步处理</strong>：如消息队列等技术，将<strong>用户的秒杀请求放进队列</strong>中，然后由后台异步处理，可以减少用户等待时间，提升用户体验。</li><li><strong>削峰填谷</strong>：用缓存、消息队列等技术来平滑流量，避开流量高峰，充分利用系统的处理能力。</li><li><strong>分布式并发处理</strong>：利用分布式锁和乐观锁等机制，保证并发条件下数据的一致性。比如在<strong>减库存</strong>的操作上，我们需要保证不超卖。</li><li><strong>稳定性保障</strong>：秒杀业务涉及到的所有外部依赖服务（如数据库、缓存、消息中间件等）都需要有冗余和容灾机制，确保任何一个环节的失效都不会导致整个秒杀业务的中断。 <strong>关键字：缓存、限流、队列异步、分布式锁</strong> 以上都是设计秒杀系统时的一些基本原则和策略。</li></ol>",2),_=[e];function a(i,l,g,c,d,p){return s(),o("div",null,_)}const T=t(n,[["render",a]]);export{m as __pageData,T as default};
