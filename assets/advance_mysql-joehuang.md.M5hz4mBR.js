import{_ as i,o as a,c as t,R as s}from"./chunks/framework.7FlijoJG.js";const y=JSON.parse('{"title":"mysql-joehuang","description":"","frontmatter":{"title":"mysql-joehuang","date":"2023-12-22T13:04:26.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"advance/mysql-joehuang.md","filePath":"advance/mysql-joehuang.md","lastUpdated":1703242057000}'),g={name:"advance/mysql-joehuang.md"},l=s('<p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221305083.png" alt="image.png"></p><h2 id="查询语句的执行过程" tabindex="-1">查询语句的执行过程 <a class="header-anchor" href="#查询语句的执行过程" aria-label="Permalink to &quot;查询语句的执行过程&quot;">​</a></h2><p>要理解 MySQL 查询过程，你首先需要知道 MySQL 全过程像一个生产线，由连接器、查询缓存、解析器、预处理、优化器、执行器这 6 个组件组成。</p><ol><li>连接器: 这如同冰箱的门，这就是你和 MySQL 数据库之间沟通的桥梁。连接器的作用是建立连接、管理连接、结束连接。MySQL 默认连接空闲时间是 8 小时。</li><li>查询缓存: 类似于冰箱中的冷藏层，如果有新鲜食物直接从这里取。如果你的 SQL 查询曾经执行过，这个结果可能会被直接缓存下来。当接收到一个新查询请求时，会先在查询缓存看看之前是否执行过这个语句。如果曾经执行过，这个查询结果就直接返回给客户端。但是，任何表的结构变了，那么缓存就会被清空。额外注意，MySQL 8.0 开始，会默认不开启查询缓存。</li><li>解析器: 你可以理解成冰箱中的食材清单。解析器做的工作就是对 SQL 语句进行词法解析和语法解析，验证其正确性并生成对应的解析树。</li><li>预处理: 类似食材清洗与切割。它是在生成的解析树基础上进行进一步的处理，确保查询请求符合 MySQL 的规则。</li><li>优化器: 等同于对食材的烹饪方式进行规划与选择，这个过程主要是确定执行 SQL 语句的查询计划，比如，判断是先查表 A 还是先查表 B。</li><li>执行器: 这就是决定是否打开冰箱，然后逐个取出食材按照配方烹饪的厨师。在所有准备调度完成后，执行器开始执行，依据表的引擎定义，去调用引擎接口。</li></ol><p>这样的 MySQL 查询流程就好比如厨师要做菜的步骤：打开冰箱-拿出配方-然后逐个取出食材-确认食材正确性-然后清洗食材-选择烹饪方式-最后开始烹饪菜肴。</p><h2 id="索引的分类" tabindex="-1">索引的分类 <a class="header-anchor" href="#索引的分类" aria-label="Permalink to &quot;索引的分类&quot;">​</a></h2><p>索引的分类：</p><ol><li><p>数据结构：</p><ul><li>B-Tree 索引：MySQL 中最常见的一种类型，对于 InnoDB 引擎，数据文件就是按照 B+Tree 组织的，用于处理等值和范围查询。</li><li>Hash 索引：适用于等值查询，不能用于排序和范围查找。</li><li>Full-text 全文索引：通常用于实现在有大量文本的字段中查找关键词。</li></ul></li><li><p>物理存储：</p><ul><li>聚簇索引：物理存储顺序和索引顺序一致，一个表只能有一个聚簇索引（InnoDB 的主键索引就是一个聚簇索引）。</li><li>非聚簇索引：也称为二级索引，非聚簇索引中的每一个项都会包含对应记录的主键值（也就是聚簇索引的键值）。</li></ul></li><li><p>字段特性分类：</p><ul><li>单列索引：包含单个列的索引。</li><li>多列索引：包含多个列的索引，也被称为复合索引。</li></ul></li><li><p>字段个数：</p><ul><li>前缀索引：表的字段过长，可以对其前缀进行索引。</li><li>全字段索引：对整个字段进行索引。</li></ul></li></ol><hr><ol><li>主键索引（PRIMARY KEY）: 每个表只能有一个主键索引。这就好比咖啡厅里的特调咖啡，每个咖啡厅只能有一个。主键的值必须是唯一的，并且绝对不能为空！</li><li>唯一索引（UNIQUE）: 顾名思义，唯一索引要求索引列的值必须唯一，但是可以包含 NULL。在一个表中可以有很多个这样的索引，就像你可以在咖啡店里买到不同口味的咖啡。</li><li>普通索引（INDEX）: 普通索引是最基本的索引，没有任何限制。他就像咖啡厅每日供应的黑咖啡，始终在那里，等你品尝。</li><li>全文索引（FULLTEXT）: 理解全文索引有点类似于理解一首诗的含义。全文索引用于对文本字段进行索引。它可以简单、高效地找出包含指定词组的记录，通常用于文本搜索。</li></ol><p>至于前缀索引，他是一种特殊的普通索引。关键的区别在于，前缀索引只对字段的部分内容建立索引。如果一个字符串列的值非常长，你可以使用前缀索引来节省存储空间。</p><h2 id="什么情况需要索引" tabindex="-1">什么情况需要索引 <a class="header-anchor" href="#什么情况需要索引" aria-label="Permalink to &quot;什么情况需要索引&quot;">​</a></h2><p>首先，确实是有一些情况下我们需要对表进行索引，比如：</p><ol><li>在经常需要查询的列上，可以加速查询；</li><li>在经常被用来连接的列上，可以加速连接；</li><li>在经常出现在 WHERE、GROUP BY、ORDER BY 或 FROM 子句的列上。</li></ol><p>而有些情形可能就不太需要索引了：</p><ol><li>表记录太少；</li><li>列中唯一值（也叫基数）的数目过少；</li><li>频繁进行大批量的更新或插入操作的表。</li></ol><h2 id="执行计划字段解释" tabindex="-1">执行计划字段解释 <a class="header-anchor" href="#执行计划字段解释" aria-label="Permalink to &quot;执行计划字段解释&quot;">​</a></h2><p>那关于执行计划的字段解释，简单说一下：</p><h3 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;Type&quot;">​</a></h3><ol><li>type: 用于描述 MySQL 对查询的表的访问类型，比较重要的性能判断因素。常见的有: ALL（全表扫描），index（全索引扫描），range（范围扫描），ref（单个或少数值匹配），eq_ref（联合主键匹配），const（常数匹配）等。</li></ol><h3 id="extra" tabindex="-1">extra <a class="header-anchor" href="#extra" aria-label="Permalink to &quot;extra&quot;">​</a></h3><p>在 MySQL 的执行计划中，extra 列可以显示关于 MySQL 如何解析查询的一些额外的信息。当你看到“Using filesort”或者“Using temporary”时，你需要理解它们指的是什么。</p><ol><li>“Using filesort”: 查询需要通过排序操作来获得结果。在这里的 filesort 并不是指使用文件，实际上，filesort 通常会在内存中完成。只有当排序的数据太大，超过了 sort_buffer_size 设置的值，才会使用到磁盘。</li><li>“Using temporary”: MySQL 需要创建一个临时表来存放查询结果。这通常发生在 Order by 和 group by 列不是同一列的情况。</li></ol><p>另外，以下是一些额外的值可能出现在 extra 列：</p><ul><li>&quot;Using index&quot;: 该查询直接利用了索引，而无需再次访问表中的数据行，我们通常称之为“覆盖索引”。</li><li>&quot;Using where&quot;: 在存储引擎返回表行后使用了 WHERE 过滤条件。</li><li>&quot;Using join buffer&quot;: 这意味着 MySQL 使用了连接缓冲区进行了块嵌套循环连接。</li><li>&quot;Impossible where&quot;: where 子句中的条件永远不会为真，查询返回结果为空。</li></ul><h2 id="索引的生效与失效情形" tabindex="-1">索引的生效与失效情形 <a class="header-anchor" href="#索引的生效与失效情形" aria-label="Permalink to &quot;索引的生效与失效情形&quot;">​</a></h2><p>然后我们谈谈索引的生效与失效情形。这就像是打乒乓球，你需要知道什么时候发力才能得分。</p><ol><li><p>索引生效：</p><ul><li>主键索引：如查询 where id = 1；</li><li>二级索引：如查询 where age &gt; 18；</li><li>覆盖索引：查询列正好是索引的一部分，如查询 select id, name from users where name = &#39;test&#39;，假设 (name, id) 上有复合索引。</li></ul></li><li><p>索引失效：</p><ul><li>模糊查询，字段有前缀就会失效，如查询 name like &#39;%test%&#39;（但是 name like &#39;test%&#39; 筛选条件是可以使用索引的）;</li><li>使用函数，如查询 where upper(name) = &#39;TEST&#39;；</li><li>隐式类型转换，当列的数据类型在 where 子句中与比较的值的数据类型不匹配时，索引不会被使用，如 name 这列是 varchar 类型，你运行 where name = 123，索引就不能用了；</li><li>联合索引最左匹配原则失败，复合索引 (name, age)，查询 where age = 18 索引失效。</li></ul></li></ol><h2 id="如何优化索引" tabindex="-1">如何优化索引 <a class="header-anchor" href="#如何优化索引" aria-label="Permalink to &quot;如何优化索引&quot;">​</a></h2><ol><li>主键尽量小：尽量使用整数类型，如果可以的话最好使用自增 ID。这是因为更小的列通常更容易查询和处理。</li><li>利用最左原则：当创建复合索引时，应该把区分度高的列放在前面。这就像你在看一场电影，之所以看得入神，就是因为导演总是先放置有冲击力的场景。</li><li>避免索引失效：尽量避免在索引列上使用函数、隐式转换、OR 等。这可以确保 MySQL 充分利用索引。这就像你在马拉松比赛中，避免穿一双不合脚的鞋子，保证你能尽力发挥。</li><li>前缀索引：如果某个 VARCHAR 字段很长，可以选择对其前面的部分建立索引，节省空间。</li><li>使用<code>EXPLAIN</code>：这个关键词可以帮助我们理解 MySQL 如何处理 SQL，从而找到优化的可能性。这就像你在驾驶赛车时，需要知道自己的每一个动作对车辆动态的影响。</li></ol><p>还有一点我要补充，尽量避免过度索引，每个额外的索引都会在插入或更新时带来额外的开销，因为每次插入或者更新行，索引都需要被更新。另外，当表被修改时，索引可能会被破坏，需要定期对其进行优化。</p><h2 id="b-树" tabindex="-1">B+树 <a class="header-anchor" href="#b-树" aria-label="Permalink to &quot;B+树&quot;">​</a></h2><p>B 树和 B+树这两位大哥，就像咖啡和拿铁咖啡一样，都很受欢迎，都是咖啡族的重要成员，但各有各的特点。我讲好这个话题就像泡一杯咖啡，往里加两勺幽默，一点点深度，就可以了。</p><p>B 树（Balanced Tree）是一种平衡的多路搜索树，他的全称的意思大概就是“你要是敢在我这棵树上找便宜，我就让你看不到家门口的路”。B 树的每个节点可以有多于 2 个子节点，通过自顶向下、从左到右进行搜索。每一层的所有关键字大致上都是平衡的。</p><p>而 B+树在 B 树的基础上，进行了一些优化，他的全称大概就是&quot;我不光平衡，我还漂亮，我是最闪亮的那颗星&quot;。B+树的非叶子节点仅用来索引，不包含实际的数据，所有数据都保存在叶子节点。这意味着每次数据的检索都要走到叶子节点，所以每次搜索的路径长度都相同</p><p>他们的主要区别：</p><ol><li>B 树的每个节点包含键和数据，而 B+树的非叶子节点只有键，真正的数据只存在叶子节点。因此，相同的数据，B+树的索引会更小。</li><li>B+树的所有叶子节点都是通过指针连接在一起的，这对于全表扫描非常有利。这就像你去喝咖啡，一眼就可以看到所有的咖啡选项，非常方便。</li><li>B+树的每层节点都相同的关键字数量，因此查询效率稳定。这使得 B+树在数据库中非常受欢迎。</li></ol><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221305313.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221307578.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221307333.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221308274.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221307100.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221315071.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221316521.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221317076.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221317074.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221318323.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221319171.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221319907.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221320451.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221320182.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221322019.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221323974.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221323726.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221323060.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221324465.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221324860.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221325412.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221326108.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221325058.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221327839.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221327522.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221328764.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221328148.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221328855.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221329560.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221329908.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221329520.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221330780.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221330562.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221331217.png" alt="image.png"><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221332447.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221332282.png" alt="image.png"></p><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312221333594.png" alt="image.png"></p>',73),n=[l];function e(p,o,c,m,u,h){return a(),t("div",null,n)}const b=i(g,[["render",e]]);export{y as __pageData,b as default};
