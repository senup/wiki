import{_ as o,o as a,c as l,k as t,a as e}from"./chunks/framework.7FlijoJG.js";const g=JSON.parse('{"title":"锁升级","description":"","frontmatter":{"title":"锁升级","date":"2023-12-25T16:28:39.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"多线程/锁升级.md","filePath":"多线程/锁升级.md","lastUpdated":1711296414000}'),r={name:"多线程/锁升级.md"},s=t("p",null,"在 HotSpot 虚拟机中，对象在内存中会被分配一个对象头，其中用于存储锁的信息是 Mark Word。在运行过程中，会根据竞争的情况将无锁状态的对象升级为偏向锁、轻量级锁、重量级锁，这个过程就是所谓的“锁升级”。",-1),n=t("ol",null,[t("li",null,[t("strong",null,"偏向锁"),e("：偏向锁的诞生是为了在无多线程竞争的情况下减少不必要的轻量级锁执行路径，因为采用 CAS 操作会消耗无谓的 CPU 资源。当一个线程访问同步块并获取了偏向锁，然后这个线程再次访问同步块就无需使用 CAS 操作来加锁和解锁，只需要简单地测试下对象头的 Mark Word 部分是不是指向该线程即可。")]),t("li",null,[t("strong",null,"轻量级锁"),e("：在没有真正竞争的情况下，线程发现对象未被锁定，JVM 会让该线程在自己的栈帧中建立一个名为锁记录(lock record)的空间来存储锁对象目前的 Mark Word，把对象头中的 Mark Word 替换为指向锁记录的指针。若这个操作成功，则该线程持有该对象的锁，这个锁就进入了轻量级的状态。")]),t("li",null,[t("strong",null,"重量级锁"),e("：当锁为轻量级锁的时候，如果又有另一个线程进行了锁竞争，产生了锁冲突，那这个轻量级锁就会膨胀为重量级锁，有了系统实现的后备策略。")])],-1),d=t("p",null,"一路上，锁从偏向升级到轻量级再到重量级",-1),c=[s,n,d];function _(i,u,p,f,h,m){return a(),l("div",null,c)}const M=o(r,[["render",_]]);export{g as __pageData,M as default};
