import{_ as t,o as a,c as e,R as n}from"./chunks/framework.7FlijoJG.js";const u=JSON.parse('{"title":"分布式","description":"","frontmatter":{"title":"分布式","date":"2023-11-29T22:52:02.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"advance/分布式.md","filePath":"advance/分布式.md","lastUpdated":1701270982000}'),o={name:"advance/分布式.md"},s=n('<h3 id="cap" tabindex="-1">CAP <a class="header-anchor" href="#cap" aria-label="Permalink to &quot;CAP&quot;">​</a></h3><p>CAP 理论是分布式系统设计中的一个基本原则，指出在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition Tolerance）这三个目标不可能同时满足。</p><ul><li><p><strong>一致性（Consistency）</strong>：所有节点在同一时间的数据是一致的。这意味着当一个节点对数据做出了修改后，所有其他节点都能立即看到这一变化。在一致性的要求下，系统无论在何时、何地访问，都能得到相同的数据。</p></li><li><p><strong>可用性（Availability）</strong>：系统能够保证对用户的每个请求都能够及时响应，即使出现节点故障或者网络分区等问题，系统也能继续提供服务。在可用性的要求下，系统对外能够提供持续的服务。</p></li><li><p><strong>分区容错性（Partition Tolerance）</strong>：系统能够容忍网络分区（网络故障或者延迟），即使在分布式系统中的节点之间发生通信故障或无法通信，系统仍能够正常工作。</p></li></ul><p>CAP理论指出，在分布式系统中，由于分区容错性的要求，当出现网络分区时，系统只能同时满足一致性和可用性中的一个，无法同时保证两者。这是因为在网络分区的情况下，为了保持一致性，可能会导致无法对外提供服务；而为了保证可用性，可能会牺牲一致性。</p><p>在实际应用中，不同的分布式系统可能会基于业务需求权衡 CAP 原则，做出不同的取舍。例如，某些系统更注重一致性，而牺牲一部分可用性；而另一些系统可能更倾向于保证可用性，即使在特定条件下会牺牲一致性。</p>',5),i=[s];function r(l,c,_,p,d,f){return a(),e("div",null,i)}const P=t(o,[["render",r]]);export{u as __pageData,P as default};
