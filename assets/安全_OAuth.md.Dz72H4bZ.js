import{_ as t,o as l,c as i,R as o}from"./chunks/framework.7FlijoJG.js";const d=JSON.parse('{"title":"OAuth","description":"","frontmatter":{"title":"OAuth","date":"2024-01-16T14:19:47.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"安全/OAuth.md","filePath":"安全/OAuth.md","lastUpdated":1711296414000}'),s={name:"安全/OAuth.md"},e=o('<h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h2><p>OAuth 2.0 和 OAuth 1.0 是两个标准，并有一些重大的区别。它们的优缺点分析如下：</p><ol><li><strong>OAuth 2.0</strong><ul><li><strong>优点</strong>： <ul><li>简单易用：OAuth 2.0 使用了 Bearer Token（通常是 JSON Web Tokens）代替 OAuth 1.0 中复杂的签名过程，这让开发和集成变得更加简单。</li><li>安全灵活：OAuth 2.0 引入了令牌范围(scopes)和生命周期管理，让权限控制变得更灵活，安全性提高。还可以通过 https 进行安全传输。</li><li>更好的用户体验：OAuth 2.0 支持更丰富的授权类型，如密码授权，客户端授权等，并且不需要每次请求都进行签名计算，提高了用户体验。</li></ul></li><li><strong>缺点</strong>： <ul><li>需要使用 https 来保护令牌传输时的安全，而获取 https 证书会增加开发和运维的工作量。</li><li>应用服务器必须有较高的安全性，因为访问令牌的泄露将可能导致严重的安全问题。</li></ul></li></ul></li><li><strong>OAuth 1.0</strong><ul><li><strong>优点</strong>： <ul><li>客户端与服务端间的每一次请求都需要签名，可以更准确的掌握并审核对资源的访问。</li><li>OAuth 1.0 可以通过明文也可以通过 https 传输，而且即便是明文传输，由于每次请求都进行签名，攻击者也难以进行攻击。</li></ul></li><li><strong>缺点</strong>： <ul><li>OAuth 1.0 的签名和加密机制很复杂，使得开发和集成更困难。</li><li>同一应用中的请求和响应签名机制有许多工作都是重复的，这浪费了服务器和客户端的处理资源，导致效率不高。</li></ul></li></ul></li></ol><p>总的来说，OAuth 2.0 主要是为了简化 OAuth 1.0 中的开发流程和运行效率，实现更好的用户体验和更丰富的授权类型，并在一定程度上提升安全性。</p><h2 id="举例" tabindex="-1">举例 <a class="header-anchor" href="#举例" aria-label="Permalink to &quot;举例&quot;">​</a></h2><p>这里，我会为你列出包括首次登录在内的完整 OAuth 2.0 登录流程：</p><p>首次登录：</p><ol><li><strong>请求用户授权</strong>：你的应用重定向用户到微信的服务器，附上应用的 ID、请求类型等信息。</li><li><strong>用户同意授权</strong>：用户在微信服务器上看到你的授权请求，并选择同意或者拒绝。如果用户同意，微信的服务器会引导用户回到你提供的回调 URL，并附上一个临时的授权码。</li><li><strong>应用请求令牌</strong>：你的应用会检测到这个授权码并捕获它，然后你的应用会将这个授权码和你的应用密钥发送给微信的服务器。</li><li><strong>微信服务器发送令牌</strong>：微信服务器会验证这个授权码和应用密钥，如果验证成功，那么微信服务器将发送一个访问令牌给你的应用。</li></ol><p>后续登录：</p><ol><li><strong>提取令牌</strong>：当用户尝试登录时，你的应用首先会检查是否有已存储的访问令牌。</li><li><strong>发送令牌</strong>：如果有，你的应用会附带上令牌发送请求到微信服务器。</li><li><strong>验证令牌</strong>：微信服务器会验证这个令牌。如果令牌是有效的，那微信服务器会发送回用户信息。</li></ol><p>请注意，访问令牌有限期，一旦过期，需要用户重新进行首次登录流程获取新的访问令牌。同时，如果用户修改了微信账号的密码、取消了授权、或者是修改了你的应用设置，此前获取的访问令牌也会失效。</p><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>OAuth 的核心原理其实就是&quot;授权&quot;。它允许第三方应用在未知用户密码的情况下访问其在某一网站存储的资源。这就好像，你不需要给老朋友家的钥匙，也可以请他帮忙浇花。</p><p>OAuth 实现这个目标的主要方式是通过引入一个授权层—代替直接使用用户凭证来访问资源，第三方应用得到一个访问令牌。这里的关键是，因为访问令牌无法用于登录，所以即使它被盗，也无法直接得到用户数据。</p><p>具体流程就是：首先，应用请求用户的授权。一旦用户授权，应用就可以使用用户的授权信息向授权服务器申请访问令牌。有了令牌以后，应用就可以使用这个令牌来访问资源服务器上的资源。</p><p>总结一下，OAuth 的核心就是：第三方应用利用用户的授权从授权服务器获取访问令牌，用该令牌去访问资源服务器。</p>',16),r=[e];function a(n,u,h,p,g,c){return l(),i("div",null,r)}const A=t(s,[["render",a]]);export{d as __pageData,A as default};
