import{_ as a,o as e,c as t,R as o}from"./chunks/framework.7FlijoJG.js";const u=JSON.parse('{"title":"分布式技术原理与实战45讲","description":"","frontmatter":{"title":"分布式技术原理与实战45讲","date":"2023-12-27T23:56:50.000Z","Tags":["tech"],"Draft":true,"HideInList":false,"Feature":null,"IsTop":false},"headers":[],"relativePath":"系统设计/分布式技术原理与实战45讲.md","filePath":"系统设计/分布式技术原理与实战45讲.md","lastUpdated":1711296414000}'),l={name:"系统设计/分布式技术原理与实战45讲.md"},r=o('<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p><img src="https://bestkxt.oss-cn-guangzhou.aliyuncs.com/img/202312272357338.png" alt="image.png"></p><h2 id="cap" tabindex="-1">CAP <a class="header-anchor" href="#cap" aria-label="Permalink to &quot;CAP&quot;">​</a></h2><p>CAP 理论可以表述为，一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition Tolerance）这三项中的两项。</p><p>CAP 理论的证明有多种方式，通过<strong>反证</strong>的方式是最直观的。反证法来证明 CAP 定理，最早是由 Lynch 提出的，通过一个实际场景，如果 CAP 三者可同时满足，由于允许 P (网络)的存在，则一定存在 Server 之间的丢包，如此则不能保证 C（一致性）。</p><p>不同业务对于一致性的要求是不同的。 举个例来讲，在微博上发表评论和点赞，用户对不一致是不敏感的，可以容忍相对较长时间的不一致，只要做好本地的交互，并不会影响用户体验； 而我们在电商购物时，产品价格数据则是要求强一致性的，如果商家更改价格不能实时生效，则会对交易成功率有非常大的影响。 需要注意的是，CAP 理论中是忽略网络延迟的，也就是当事务提交时，节点间的数据复制一定是需要花费时间的。即使是同一个机房，从节点 A 复制到节点 B，由于现实中网络不是实时的，所以总会有一定的时间不一致。</p><ul><li>CP 架构：对于 CP 来说，放弃可用性，追求一致性和分区容错性。比如 zookeeper</li><li>AP 架构：对于 AP 来说，放弃强一致性，追求分区容错性和可用性，这是很多分布式系统设计时的选择，后面的 Base 也是根据 AP 来扩展的。如 Eureka</li></ul><h2 id="base-理论" tabindex="-1">Base 理论 <a class="header-anchor" href="#base-理论" aria-label="Permalink to &quot;Base 理论&quot;">​</a></h2><p>Base 是三个短语的简写，即基本可用（Basically Available）、软状态（Soft State）和最终一致性（Eventually Consistent）。</p><p>Base 理论的核心思想是<strong>最终一致性</strong>，即使无法做到强一致性（Strong Consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual Consistency）。</p><ul><li>系统能够基本运行，一直提供服务</li><li>许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。</li><li>数据不可能一直是软状态，必须在一个时间期限之后达到各个节点的一致性，在期限过后，应当保证所有副本保持数据一致性，也就是达到数据的最终一致性。</li></ul><h3 id="cap-及-base-的关系" tabindex="-1">CAP 及 Base 的关系 <a class="header-anchor" href="#cap-及-base-的关系" aria-label="Permalink to &quot;CAP 及 Base 的关系&quot;">​</a></h3><p>Base 理论是在 CAP 上发展的，CAP 理论描述了分布式系统中数据一致性、可用性、分区容错性之间的制约关系，当你选择了其中的两个时，就不得不对剩下的一个做一定程度的牺牲。 Base 理论则是对 CAP 理论的实际应用，也就是在分区和副本存在的前提下，通过一定的系统设计方案，放弃强一致性，实现基本可用，这是大部分分布式系统的选择，比如 NoSQL 系统、微服务架构。在这个前提下，如何把基本可用做到最好，就是分布式工程师们追求的。</p><h2 id="分布式事务是什么" tabindex="-1">分布式事务是什么 <a class="header-anchor" href="#分布式事务是什么" aria-label="Permalink to &quot;分布式事务是什么&quot;">​</a></h2><p>分布式事务关注的是分布式场景下如何处理事务，是指事务的参与者、支持事务操作的服务器、存储等资源分别位于分布式系统的不同节点之上。</p><p>简单来说，分布式事务就是一个业务操作，是由多个细分操作完成的，而这些细分操作又分布在不同的服务器上；事务，就是这些操作要么全部成功执行，要么全部不执行。</p><h3 id="分布式事务产生的原因" tabindex="-1">分布式事务产生的原因 <a class="header-anchor" href="#分布式事务产生的原因" aria-label="Permalink to &quot;分布式事务产生的原因&quot;">​</a></h3><p>分布式事务产生的原因主要来源于存储和服务的拆分。</p><ul><li>存储层拆分，最典型的就是数据库分库分表。</li><li>服务层拆分也就是业务的服务化，系统架构的演进是从集中式到分布式，业务功能之间越来越解耦合。</li></ul><h2 id="分布式事务解决方案" tabindex="-1">分布式事务解决方案 <a class="header-anchor" href="#分布式事务解决方案" aria-label="Permalink to &quot;分布式事务解决方案&quot;">​</a></h2><h3 id="协调者统一调度" tabindex="-1">协调者统一调度 <a class="header-anchor" href="#协调者统一调度" aria-label="Permalink to &quot;协调者统一调度&quot;">​</a></h3><p>在分布式事务的定义中，如果想让分布式部署的多台机器中的数据保持一致性，那么就要保证在所有节点的数据写操作，要么全部都执行，要么全部都不执行。但是，一台机器在执行本地事务的时候无法知道其他机器中本地事务的执行结果，节点并不知道本次事务到底应该 Commit 还是 Rollback。</p><p>在前面介绍过的几种一致性算法中，都是通过一个 Leader 进程进行协调，在 2PC（两阶段）和 3PC（三阶段）中也是一样的解决办法。 二阶段和三阶段提交协议都是引入了一个协调者的组件来统一调度所有分布式节点的执行，让当前节点知道其他节点的任务执行状态，通过通知和表决的方式，决定执行 Commit 还是 Rollback 操作。</p><p>分布式事务的解决方案，典型的有[[两阶段提交]]和[[三阶段提交]]协议、 [[TCC]] 分段提交，和基于消息队列的最终一致性设计。</p><h3 id="_2pc-两阶段提交" tabindex="-1">2PC 两阶段提交 <a class="header-anchor" href="#_2pc-两阶段提交" aria-label="Permalink to &quot;2PC 两阶段提交&quot;">​</a></h3><p>[[两阶段提交]]（2PC，Two-phase Commit Protocol）是非常经典的强一致性、中心化的原子提交协议，在各种事务和一致性的解决方案中，都能看到两阶段提交的应用。</p><h3 id="_3pc-三阶段提交" tabindex="-1">3PC 三阶段提交 <a class="header-anchor" href="#_3pc-三阶段提交" aria-label="Permalink to &quot;3PC 三阶段提交&quot;">​</a></h3><p>[[三阶段提交]]协议（3PC，Three-phase_commit_protocol）是在 2PC 之上扩展的提交协议，主要是为了解决两阶段提交协议的阻塞问题，从原来的两个阶段扩展为三个阶段，增加了超时机制。</p><h3 id="tcc-分段提交" tabindex="-1">TCC 分段提交 <a class="header-anchor" href="#tcc-分段提交" aria-label="Permalink to &quot;TCC 分段提交&quot;">​</a></h3><p>TCC 是一个分布式事务的处理模型，将事务过程拆分为 Try、Confirm、Cancel 三个步骤，在保证强一致性的同时，最大限度提高系统的可伸缩性与可用性。</p><p>两阶段、三阶段以及 TCC 协议在后面的课程中我会详细介绍，接下来介绍几种系统设计中常用的一致性解决方案。</p><h3 id="基于消息补偿的最终一致性" tabindex="-1">基于消息补偿的最终一致性 <a class="header-anchor" href="#基于消息补偿的最终一致性" aria-label="Permalink to &quot;基于消息补偿的最终一致性&quot;">​</a></h3><p>异步化在分布式系统设计中随处可见，基于消息队列的最终一致性就是一种异步事务机制，在业务中广泛应用。</p><p>在具体实现上，基于消息补偿的一致性主要有[[本地消息表]]和第三方可靠消息队列等。</p>',34),i=[r];function s(n,h,c,p,d,C){return e(),t("div",null,i)}const _=a(l,[["render",s]]);export{u as __pageData,_ as default};
